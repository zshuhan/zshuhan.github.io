<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>(✿◡‿◡)胖涵</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zshuhan.github.io/"/>
  <updated>2020-06-25T14:34:16.791Z</updated>
  <id>https://zshuhan.github.io/</id>
  
  <author>
    <name>舍予</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单入门HTTP</title>
    <link href="https://zshuhan.github.io/2020/06/25/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8HTTP/"/>
    <id>https://zshuhan.github.io/2020/06/25/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8HTTP/</id>
    <published>2020-06-25T08:27:33.597Z</published>
    <updated>2020-06-25T14:34:16.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>思维导图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200625222336500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="http介绍"><a class="markdownIt-Anchor" href="#http介绍"></a> HTTP介绍</h3><h4 id="http概念"><a class="markdownIt-Anchor" href="#http概念"></a> HTTP概念</h4><p>超文本传输协议(HTTP， HyperText Transfer Protoco1) 是互联网上应用最为广泛的一种网络协议。用于产生客户端浏览器和服务器之间交换的数据。</p><p>HTTP使用统一资源标识符（URL，Uniform Resource Identifiers）去建立连接和传输数据。</p><p>特点：<br>① 面向事务的客户服务器协议<br>② 无状态：服务器不保存任何有关客户端过去所发请求的信息<br>③无连接：每次连接只处理一个请求</p><h4 id="http工作原理"><a class="markdownIt-Anchor" href="#http工作原理"></a> HTTP工作原理</h4><p>HTTP协议工作于C/S架构上。浏览器作为HTTP客户端通过URL向HTTP服务端（WEB服务器）发送所有请求。</p><p>其中Web服务器有：Apache服务器，IIS服务器（Internet Information Services）等。</p><p>Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p>HTTP默认端口号为80。</p><h4 id="与http关系密切的协议"><a class="markdownIt-Anchor" href="#与http关系密切的协议"></a> 与HTTP关系密切的协议</h4><p>DNS：域名解析协议，负责对域名进行解析。访问某个网页，我们往往是通过域名(<a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a>)进行访问,但计算机只认识主机地址（192.168.xx.xx）。这时就需要DSN去把域名转换为主机地址</p><p>TCP：TCP协议采用了三次握手的方式来保证数据的准确运输</p><p>IP：传输数据包，找到通信目的地地址。IP协议把我们的产生的数据包发送给对方，IP地址指明了节点被分配的地址，但IP地址可能会变换，我们可以使用ARP协议来将IP地址反射为MAC地址</p><h3 id="消息结构"><a class="markdownIt-Anchor" href="#消息结构"></a> 消息结构</h3><h4 id="客户端请求消息"><a class="markdownIt-Anchor" href="#客户端请求消息"></a> 客户端请求消息</h4><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p><p>●请求行 :声明请求方法、主机域名、资源路径&amp;协议版本。请求行的组成=请求方法  请求路径  协议版本；注意：空格不能省；<br>●请求头 :声明客户端、服务器/报文的部分信息。使用方法：采用“header(字段名)：value（值）”的方式；<br>●请求体:存放需发送的数据信息。</p><p>客户端请求：<br>GET /hello.txt  HTTP/1.1  //请求行<br>User-Agent: Mozilla/5.0<br>Host: <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a>  //以上两行都是请求头</p><h4 id="服务器响应消息"><a class="markdownIt-Anchor" href="#服务器响应消息"></a> 服务器响应消息</h4><p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p><p>●状态行:声明协议版本，状态码，状态码描述。组成：状态行有协议版本、状态码&amp;状态信息组成；<br>●响应头: 声明客户端、服务器/报文的部分信息。使用方式：采用“header(字段名)：value(值)”r的方式；<br>●响应体:存放需发送的数据信息。使用方式：和请求体是一致的，同样分为：任意类型的数据交换格式、键值对形式和分部分形式；</p><p>服务端响应:<br>HTTP/1.1 200 OK  //状态行<br>Date: Mon, 24 Jul 2020 12:28:53 GMT<br>Server: Apache<br>Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT<br>Accept-Ranges: bytes<br>Content-Type: text/plain</p><h3 id="请求方法"><a class="markdownIt-Anchor" href="#请求方法"></a> 请求方法</h3><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1 新增了六种请请：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p><ul><li>GET：获取数据</li><li>POST：提交数据</li><li>HEAD：获取报头</li><li>PUT：传输文件</li><li>DELETE ：删除文件</li><li>CONNECT：要求用隧道协议连接代理</li><li>OPTIONS：询问支持的方法</li><li>TRACE：追踪路径</li><li>PATCH：对资源进行部分修改。PUT 也可以用于修改资源，但是只能完全替代原始资源。</li></ul><h3 id="状态码"><a class="markdownIt-Anchor" href="#状态码"></a> 状态码</h3><ul><li>1XX<br>信息，服务器收到请求，需要请求者继续执行操作<br>100：继续。客户端应继续其请求<br>101：切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</li><li>2XX<br>表示请求成功<br>200：正常处理<br>204：成功处理，但服务器没有新数据返回，显示⻚面不更新<br>206： 对服务器进行范围请求，只返回一部分数据</li><li>3XX<br>表示重定向，需要进一步的操作以完成请求<br>301： 请求的资源已分配了新的URI中，以后应使用新的URL地址。【永久重定向】<br>302： 请求的资源临时分配了新的URI中，URL地址没变【临时重定向】<br>303： 与302相同的功能，但明确客户端应该采用GET方式来获取资源<br>304： 发送了附带请求，但不符合条件【返回未过期的缓存数据】</li><li>4XX<br>表示客户端错误，请求包含语法错误或无法完成请求<br>400： 请求报文语法错误了<br>401： 需要认证身份<br>403： 没有权限访问<br>404： 服务器没有这个资源</li><li>5XX<br>表示服务器错误，服务器在处理请求的过程中发生了错误<br>500： 内部资源出错了<br>503： 服务器正忙</li></ul><h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3><ol><li><p>Http与Https的区别：</p><ul><li>HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头</li><li>HTTP 是不安全的，而 HTTPS 是安全的</li><li>HTTP 标准端口是80 ，而 HTTPS 的标准端口是443</li><li>在OSI 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层</li><li>HTTP 无法加密，而HTTPS 对传输的数据进行加密</li><li>HTTP无需证书，而HTTPS 需要CA机构颁发的SSL证书</li></ul></li><li><p>URI和URL的区别是什么?</p><ul><li><p>URI(Uniform Resource Identifier) 是统一资源标志符，可以唯一标识一个资源。</p></li><li><p>URL(Uniform Resource Location) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还提供了如何定位 这个资源。</p><p>URI的作用像身份证号一样，URL的作用更像家庭住址一样。</p></li></ul></li></ol><p>orm Resource Location) 是统一资源定位符，可以提供该资源的路径。它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还提供了如何定位 这个资源。</p><pre><code> URI的作用像身份证号一样，URL的作用更像家庭住址一样。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="HTTP" scheme="https://zshuhan.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://zshuhan.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>和我一起学MyBatis</title>
    <link href="https://zshuhan.github.io/2020/06/14/MyBatis/"/>
    <id>https://zshuhan.github.io/2020/06/14/MyBatis/</id>
    <published>2020-06-14T14:25:27.113Z</published>
    <updated>2020-06-25T14:35:36.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简单介绍"><a class="markdownIt-Anchor" href="#简单介绍"></a> 简单介绍</h3><ol><li><p>什么是 MyBatis？</p><p>MyBatis是一个数据持久层(ORM)框架。把实体类和SQL语句之间建立了映射关系，是一种<strong>半自动化</strong>的ORM实现。</p><p>MyBatis 的<strong>主要思想</strong>是将程序中的大量 SQL 语句抽取出来，配置在配置文件中，以实现 SQL 的灵活配置。</p><p><em>ORM又是什么？</em></p><p>ORM（Object/Relational Mapping）：对象关系映射，它完成面向对象的编程语言到关系数据库的映射。它的作用是把持久化对象的保存、修改、删除等操作，转换成对数据库的操作。</p><p>ORM 基本映射关系：</p><ul><li>数据表映射类</li><li>数据表的行映射对象（实例）</li><li>数据表的列（字段）映射对象的属性</li></ul></li><li><p>MyBatis 的三层功能架构</p><ul><li><strong>API接口层</strong>：提供给外部使用的接口 API，通过本地 API 来操纵数据库。接口层一但接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li><strong>数据处理层</strong>：负责具体的 SQL 查找、SQL 解析、SQL 执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li><strong>基础支撑层</strong>：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件，为上层的数据处理层提供最基础的支撑</li></ul></li><li><p>看</p></li><li><p>MyBatis的优点</p><ul><li>简单小巧灵活易于上手，方便浏览修改 SQL 语句</li><li>解除 SQL 与程序代码的耦合</li><li>提供对象关系映射标签，支持对象与数据库的 ORM 字段关系映射</li><li>提供 xml 标签，支持编写动态 SQL</li></ul></li><li><p>MyBatis 与 JDBC 的区别</p><p>Mybatis 是基于 JDBC 的。Java 与数据库操作仅能通过 JDBC 完成。 Mybatis 也要通过 JDBC 完成数据查询、更新这些动作。Mybatis 仅仅是在 JDBC 基础上做了，OO 化、封装事务管理接口这些东西。</p></li></ol><h3 id="入门程序"><a class="markdownIt-Anchor" href="#入门程序"></a> 入门程序</h3><ol><li><p>数据库准备，新建名为mybatis的数据库，建数据库表</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617164059963.png"  alt=" "></p></li><li><p>程序生成器（修改generatorConfig.xml→选择lib文件夹，Shift键加鼠标右键进入li目录下，执行脚本<strong>java -jar mybatis-generator-core-1.3.2.jar -configfile generatorConfig.xml -overwrite</strong>)</p><p>generatorConfig.xml文件：</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617170915673.png"  alt="image-20200617170915673"></p><p>执行后生成的目录结果：</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CDesktop%5C%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%5C7%5D8@ECT%60HA5K5%7B4P$@_%5DLW2.png"  alt></p></li><li><p>打开eclipse，新建名为Mybatis的项目，在src里新建三个包（如图所示），包名要和上图generatorConfig.xml文件的一样。</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617214801053.png"  alt="image-20200617214801053"></p></li><li><p>把生成的文件导入相应位置</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617225603859.png"  alt="image-20200617225603859"></p><ul><li><p>实体类：在包 <code>com.dlnu.Mybatis.pojol</code> 下放入类 Customer.java ， 一个用户具有：id、username、jobs、phone四个属性。作为 mybatis 进行 sql 映射使用，与数据库表对应。</p><p>代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.Mybatis.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String jobs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充说明，自动生成的程序是没有构造函数的，需要的需自己添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String username, String jobs, String phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.jobs = jobs;</span><br><span class="line"><span class="keyword">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Integer id, String username, String jobs, String phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.jobs = jobs;</span><br><span class="line"><span class="keyword">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印对象，也需要自己添加</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [Id="</span> + id + <span class="string">", username="</span> + username + <span class="string">", jobs="</span> + jobs + <span class="string">", phone="</span> + phone + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username == <span class="keyword">null</span> ? <span class="keyword">null</span> : username.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getJobs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> jobs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobs</span><span class="params">(String jobs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.jobs = jobs == <span class="keyword">null</span> ? <span class="keyword">null</span> : jobs.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.phone = phone == <span class="keyword">null</span> ? <span class="keyword">null</span> : phone.trim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>DAO层：新建包 <code>com.dlnu.Mybatis.mapper</code> ，并在包下放入方法接口 CustomerMapper.java ，提供简单的增删改查数据和mybatis分页操作。</p><p>代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.Mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.Mybatis.pojo.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除客户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增客户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Customer cust)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有客户信息</span></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新某客户信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Customer cust)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询员工</span></span><br><span class="line"><span class="function">List&lt;Customer&gt; <span class="title">queryByPage</span><span class="params">(@Param(<span class="string">"start"</span>)</span> <span class="keyword">int</span> start, @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> <span class="keyword">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>映射文件：在包 <code>com.dlnu.Mybatis.mapper</code> 下放入映射文件 CustomerMapper.xml` ，用来定义各种 SQL 语句和这些语句的参数，以及要返回的类型等。CustomerMapper.xml写好后，需要在mybatis-config.xml文件加载它</p><p>CustomerMapper.xml 的配置如下：（生成的东西很多，只根据自己需要的留下）</p></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace属性是名称空间，必须唯一 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.Mybatis.dao.CustomerMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- resultMap标签:映射实体与表</span></span><br><span class="line"><span class="comment">  type属性：表示实体全路径名</span></span><br><span class="line"><span class="comment">  id属性：为实体与表的映射取一个任意的唯一的名字</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.dlnu.Mybatis.pojo.Customer"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id标签:映射主键属性</span></span><br><span class="line"><span class="comment">  result标签：映射非主键属性</span></span><br><span class="line"><span class="comment">  property属性:实体的属性名</span></span><br><span class="line"><span class="comment">  column属性：表的字段名</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"jobs"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"jobs"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 定义 SQL 语句，其中 id 需要和接口中的方法名一致 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- default：数据库中我设置id自增，所以需要默认 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- parameterType 指明查询时使用的参数类型，resultType 指明查询返回的结果集类型 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 新增客户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    insert into customer (id, username, jobs, phone)</span><br><span class="line">    values (default, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;jobs,jdbcType=VARCHAR&#125;, </span><br><span class="line">      #&#123;phone,jdbcType=VARCHAR&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--根据id更新客户--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    update customer</span><br><span class="line">    set username = #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">      jobs = #&#123;jobs,jdbcType=VARCHAR&#125;,</span><br><span class="line">      phone = #&#123;phone,jdbcType=VARCHAR&#125;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 查询所有客户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span>  <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">    select * from customer</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 根据id删除客户 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from customer</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 分页查询客户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByPage"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">SELECT *</span><br><span class="line">FROM customer </span><br><span class="line">LIMIT #&#123;start&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>导入jar包（目录如下）</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617230246519.png"  alt="image-20200617230246519"></p></li><li><p>配置文件</p><p>mybatis-config.xml，用来配置 Mybatis 的运行环境、数据源、事务等。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用外部配置文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db_config.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实体类的别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.Mybatis.pojo.Customer"</span> <span class="attr">alias</span>=<span class="string">"Customer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type="JDBC"表示使用JDBC的提交和回滚--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--type="POOLED"表示支持JDBC数据库连接池  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/Mybatis/mapper/CustomerMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>db_config.properties，用于存放数据库连接参数</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mybatis</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>log4j.properties，日志记录文件方便查看控制台输出的 SQL 语句</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout  </span></span><br><span class="line"><span class="meta">log4j.logger.com.abc.mapper</span>=<span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">log4j.category.org.springframework</span> = <span class="string">OFF</span></span><br></pre></td></tr></table></figure></li><li><p>测试。在包 <code>com.dlnu.mybatis.test</code> 下新建测试类 <code>TestCustomer.java</code> ， 用来测试数据的增删改查操作和MyBatis分页。</p><p><strong>Mybatis工作流程</strong>：</p><ul><li>通过InputStream对象读取Mybatis映射文件</li><li>通过SqlSessionFactoryBuilder对象创建SqlSessionFactory对象</li><li>获取当前线程的SQLSession</li><li>事务默认开启</li><li>获得Mapper 对象</li><li>调用接口方法(insert,delete,update,select)</li><li>提交事务关闭资源</li></ul><p>TestCustomer.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.Mybatis.dao.CustomerMapper;</span><br><span class="line"><span class="keyword">import</span> com.dlnu.Mybatis.pojo.Customer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mybatis 配置文件</span></span><br><span class="line"><span class="keyword">private</span> String fileName = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增客户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(<span class="string">"joy"</span>, <span class="string">"经理"</span>, <span class="string">"18269151234"</span>);</span><br><span class="line">mapper.insert(cust);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新客户信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 插入更新数据</span></span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(<span class="number">1</span>, <span class="string">"lili"</span>, <span class="string">"Hr"</span>, <span class="string">"17456421562"</span>);</span><br><span class="line">mapper.update(cust);</span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除客户</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 执行删除操作</span></span><br><span class="line">mapper.delete(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有的客户信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 执行查询操作</span></span><br><span class="line">List&lt;Customer&gt; list = mapper.query();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"查询所有客户结果："</span>);</span><br><span class="line"><span class="keyword">for</span> (Customer cust : list) &#123;</span><br><span class="line">System.out.println(cust);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryByPage</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 执行查询操作</span></span><br><span class="line">List&lt;Customer&gt; list = mapper.queryByPage(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"分页结果："</span>);</span><br><span class="line"><span class="keyword">for</span> (Customer customer : list) &#123;</span><br><span class="line">System.out.println(customer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​测试成功！可以在数据库查看信息了。这也算是入门成功了！</p><p>​</p><h3 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h3><p>mybatis-config.xml的内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用外部配置文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db_config.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实体类的别名，将包内的 Java 类的类名作为类的类别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.Mybatis.pojo.Customer"</span> <span class="attr">alias</span>=<span class="string">"Custmer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type="JDBC"表示使用JDBC的提交和回滚--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--type="POOLED"表示支持JDBC数据库连接池  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池由MyBatis管理，数据库名是mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射文件路径 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 mapper 接口包加载整个包的映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/Mybatis/mapper/CustomerMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![*](file:///C:\Users\Administrator\AppData\Local\Temp\artDD7.tmp)MyBatis 配置文件的 configuration 标签主要包括：</p><ul><li>configuration 配置</li><li>properties 配置文件中属性值</li><li>settings 修改 MyBat is 在运行时的行为方式</li><li>typeAliases 为 Java 类型命名一个短名字</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量</li><li>transactionManager 事务管理器</li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul><p>下面来详细介绍在程序中出现的属性：</p><ol><li><p>properties用于引用外部配置文件路径， properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件。</p></li><li><p><strong>typeAliases</strong> <strong>元素</strong>，与XML 配置文件相关联，减少输入多余的完整类名</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.Mybatis.pojo.Customer"</span> <span class="attr">alias</span>=<span class="string">"Custmer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在映射文件中 <code>parameterType</code> 和 <code>resultType</code> 就可以直接把长长的&quot;com.dlnu.Mybatis.pojo.Customer&quot;写成“Customer”</p><ol start="3"><li><p>environments 环境，是对数据源的配置。MyBatis 能够配置多套运行环境，这有助于将您的SQL 映射到多个数据库上。</p><ul><li><p>transactionManager：事务管理器，</p><p>MyBatis 中的两种事务管理器，即 type=&quot;[JDBC|MANAGED]&quot;：</p><ul><li>JDBC：直接使用 JDBC 的提交和回滚设置</li><li>MANAGED：让容器来管理事务的整个生命周期</li></ul></li><li><h4 id="datasource-元素使用标准的-jdbc-数据源接口来配置-jdbc-连接对象的资源-mybatis-三种內建的数据源类型即-typeunpooledpooledjndi"><a class="markdownIt-Anchor" href="#datasource-元素使用标准的-jdbc-数据源接口来配置-jdbc-连接对象的资源-mybatis-三种內建的数据源类型即-typeunpooledpooledjndi"></a> dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。MyBatis 三种內建的数据源类型，即 type=&quot;[UNPOOLED|POOLED|JNDI]&quot;。</h4><ul><li>&quot;POOLED&quot;表示支持JDBC数据库连接池</li><li>“UNPOOLED”表示不支持 JDBC 数据源连接池，在配置该数据源类型后，在每次被请求时打开和关闭连接。</li><li>“JNDI”支持外部数据源连接池，可以在EJB 或应用服务器等容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。其包含的属性：<ul><li>initial_context：用来在 InitialContext 中寻找上下文</li><li>data_source：表示引用数据源实例位置的上下文的路径</li></ul></li></ul></li></ul></li><li><p>mapper映射器， 用于引用已经定义好的映射文件，告诉 MyBatis 去哪寻找映射 SQL 的语句。</p></li></ol><h3 id="映射文件"><a class="markdownIt-Anchor" href="#映射文件"></a> 映射文件</h3><p>映射文件是所有 SQL 语句放置的地方，写好 SQL 语句映射文件后，需要在配置文件的 mappers 标签中引用。</p><p>在映射文件中，<mapper>元素是映射文件的根元素，其他元素都是它的子元素。如下图所示：</mapper></p><p>![](C:\Users\Administrator\Desktop\新建文件夹\mapper .png)</p><ol><li><p>select</p><p>select元素用来映射查询语句，它可以帮助我们从数据库中读取出数据，并组装数据给业务开发人员。</p><p>示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询所有数据，返回值类型是List&lt;Customer&gt;的，只要写集合中的类型就行了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"query"</span>  <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">    select * from customer</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们查询出来的结果是多个对象了，所以我们使用的是以下方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 执行查询操作</span></span><br><span class="line">List&lt;Customer&gt; list = mapper.query();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Customer cust : list) &#123;</span><br><span class="line">System.out.println(cust);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><insert><p><insert>元素用于映射插入语句，在执行完元素中定义的SQL<br>语句后，会返回一个表示插入记录数的整数。</insert></p><p>示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    insert into customer (id, username, jobs, phone)</span><br><span class="line">    values (default, #&#123;username,jdbcType=VARCHAR&#125;, #&#123;jobs,jdbcType=VARCHAR&#125;, </span><br><span class="line">      #&#123;phone,jdbcType=VARCHAR&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(<span class="string">"joy"</span>, <span class="string">"经理"</span>, <span class="string">"18269151234"</span>);</span><br><span class="line">mapper.insert(cust);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></insert></li><li><update><p>示例：</p></update></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据id更新--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line">    update customer</span><br><span class="line">    set username = #&#123;username,jdbcType=VARCHAR&#125;,</span><br><span class="line">      jobs = #&#123;jobs,jdbcType=VARCHAR&#125;,</span><br><span class="line">      phone = #&#123;phone,jdbcType=VARCHAR&#125;</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​调用方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(<span class="number">1</span>, <span class="string">"lili"</span>, <span class="string">"Hr"</span>, <span class="string">"17456421562"</span>);</span><br><span class="line">mapper.update(cust);</span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><delete></delete></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据id删除--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from customer</span><br><span class="line">    where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​根据id删除信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 获得dao对象</span></span><br><span class="line">CustomerMapper mapper = session.getMapper(CustomerMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 执行删除操作</span></span><br><span class="line">mapper.delete(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务需要手动提交</span></span><br><span class="line">session.commit();</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系映射"><a class="markdownIt-Anchor" href="#关系映射"></a> 关系映射</h3><p>MyBatis 的关联映射可以大大简化持久层数据的访问，关联关系的分类如下：</p><ul><li>一对一：一个学号只属于一个学生，一个学生也只能有一个学号</li><li>一对多：一个班级有多个学生，一个学生只属于一个班级</li><li>多对多：一个学生可以选多门课，一门课可以有多个学生选</li></ul><ol><li><p>一对一</p><ul><li><p>设计数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> card (</span><br><span class="line">  c_id <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span>,</span><br><span class="line">  c_num <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  s_id <span class="built_in">int</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span> ,</span><br><span class="line">  s_name <span class="built_in">varchar</span>(<span class="number">20</span>) ,</span><br><span class="line">  s_cid <span class="built_in">int</span>(<span class="number">11</span>) ,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> student_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (s_cid) <span class="keyword">REFERENCES</span> card (c_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> card(c_id,c_num) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'10086'</span>),(<span class="number">2</span>,<span class="string">'10010'</span>),(<span class="number">3</span>,<span class="string">'10000'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> <span class="string">`student（s_id,s_name,s_cid) values (1,'sam',1),(2,'tom',2),(3,'zhangsan',3);</span></span><br></pre></td></tr></table></figure></li><li><p>导入jar包（目录如下）</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617230246519.png"  alt="image-20200617230246519"></p></li><li><p>配置文件</p><p>mybatis-config.xml，用来配置 Mybatis 的运行环境、数据源、事务等。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用外部配置文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db_config.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实体类的别名，将包内的 Java 类的类名作为类的类别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.humen.pojo.Card"</span> <span class="attr">alias</span>=<span class="string">"Card"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.humen.pojo.Student"</span> <span class="attr">alias</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type="JDBC"表示使用JDBC的提交和回滚--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--type="POOLED"表示支持JDBC数据库连接池  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池由MyBatis管理，数据库名是mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射文件路径 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 mapper 接口包加载整个包的映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/humen/mapper/CardMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/humen/mapper/StudentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>db_config.properties，用于存放数据库连接参数</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/humen</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>log4j.properties，日志记录文件方便查看控制台输出的 SQL 语句</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout  </span></span><br><span class="line"><span class="meta">log4j.logger.com.abc.mapper</span>=<span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">log4j.category.org.springframework</span> = <span class="string">OFF</span></span><br></pre></td></tr></table></figure></li><li><p>实体，放入包com.dlnu.humen.pojo中</p><p>Card.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.humen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer cId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String cNum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Card</span><span class="params">(Integer cId, String cNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.cId = cId;</span><br><span class="line"><span class="keyword">this</span>.cNum = cNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getcId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcId</span><span class="params">(Integer cId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cId = cId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getcNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcNum</span><span class="params">(String cNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cNum = cNum == <span class="keyword">null</span> ? <span class="keyword">null</span> : cNum.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Card [cId="</span> + cId + <span class="string">", cNum="</span> + cNum + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.humen.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer sId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String sName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer sAge;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Card card;<span class="comment">// 关联属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer sId, String sName, Integer sAge, Card card)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.sId = sId;</span><br><span class="line"><span class="keyword">this</span>.sName = sName;</span><br><span class="line"><span class="keyword">this</span>.sAge = sAge;</span><br><span class="line"><span class="keyword">this</span>.card = card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getsId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsId</span><span class="params">(Integer sId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sId = sId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getsName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsName</span><span class="params">(String sName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sName = sName == <span class="keyword">null</span> ? <span class="keyword">null</span> : sName.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getsAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsAge</span><span class="params">(Integer sAge)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Card <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Card card)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.card = card;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [sId="</span> + sId + <span class="string">", sName="</span> + sName + <span class="string">", sAge="</span> + sAge + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射文件，放入包com.dlnu.humen.mapper中</p><p>CardMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.humen.dao.CardMapper"</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"Card"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_num"</span> <span class="attr">property</span>=<span class="string">"cNum"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.humen.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"s_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"sId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"sName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_age"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"sAge"</span> /&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 一对一关联映射：association --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"card"</span> <span class="attr">javaType</span>=<span class="string">"Card"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_num"</span> <span class="attr">property</span>=<span class="string">"cNum"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--查询某身份证对应的学生姓名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryByNum"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">  select s.s_name,s.s_id</span><br><span class="line">  from student s</span><br><span class="line">  left outer join card c ON s.`s_cid`=c.`c_id`</span><br><span class="line">  where c.c_num=#&#123;cNum&#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Dao层，放入包com.dlnu.humen.dao中</p><p>CardMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.humen.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.humen.pojo.Card;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Card card)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Card <span class="title">query</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Card card)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.humen.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.humen.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer sId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Student stu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">queryByNum</span><span class="params">(String cNum)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Student stu)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试，根据身份证号码查对应的学生姓名。</p><p>TestStudent.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.humen.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.humen.dao.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.dlnu.humen.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line"><span class="comment">// Mybatis 配置文件</span></span><br><span class="line"><span class="keyword">private</span> String fileName = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testqueryByNum</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得mapper对象</span></span><br><span class="line">StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; list = mapper.queryByNum(<span class="string">"10086"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Student stu : list) &#123;</span><br><span class="line">System.out.println(stu.getsName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200620123239917.png"  alt="image-20200620123239917"></p></li></ul></li><li><p>一对多</p><ul><li><p>设计数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    s_id <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span>,</span><br><span class="line">    s_name <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  s_age <span class="built_in">int</span>(<span class="number">11</span>)，</span><br><span class="line">    s_gid <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">    <span class="keyword">constraint</span> student_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(s_gid) <span class="keyword">references</span> grade (g_id)</span><br><span class="line">   );</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">create</span> <span class="keyword">table</span> grade(</span><br><span class="line">      g_id <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span>,</span><br><span class="line">      g_name <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">      );</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">insert</span>  <span class="keyword">into</span> student(s_id,s_name,s_aga,s_gid) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'zhangsan'</span>,<span class="number">18</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">'lisi'</span>,<span class="number">20</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="string">'zhaowu'</span>,<span class="number">19</span>,<span class="number">1</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">insert</span>  <span class="keyword">into</span> grade(g_id,g_name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'sql'</span>),(<span class="number">2</span>,<span class="string">'java'</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">select</span> * <span class="keyword">from</span> grade;</span><br><span class="line">   <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></li><li><p>实体，放入包com.dlnu.school.pojo中</p><p>Grade.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.school.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 班级（单方）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer gId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String gName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Grade</span><span class="params">(Integer gId, String gName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.gId = gId;</span><br><span class="line"><span class="keyword">this</span>.gName = gName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getgId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setgId</span><span class="params">(Integer gId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gId = gId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getgName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setgName</span><span class="params">(String gName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gName = gName == <span class="keyword">null</span> ? <span class="keyword">null</span> : gName.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Class [gId="</span> + gId + <span class="string">", gName="</span> + gName + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.dlnu.school.pojo;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * 学生（多方）</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer sId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String sName;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Integer sAge;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Grade grade;<span class="comment">// 关联属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer sId, String sName, Integer sAge, Grade grade)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();</span><br><span class="line">  <span class="keyword">this</span>.sId = sId;</span><br><span class="line">  <span class="keyword">this</span>.sName = sName;</span><br><span class="line">  <span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">  <span class="keyword">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getsId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsId</span><span class="params">(Integer sId)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sId = sId;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getsName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsName</span><span class="params">(String sName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sName = sName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getsAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sAge;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsAge</span><span class="params">(Integer sAge)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Grade <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> grade;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Grade grade)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Student [sId="</span> + sId + <span class="string">", sName="</span> + sName + <span class="string">", sAge="</span> + sAge + <span class="string">", grade="</span> + grade + <span class="string">"]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>映射文件，放入包com.dlnu.school.mapper中</p><p>GradeMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.school.dao.GradeMapper"</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- resultMap: 映射实体类和字段之间的一一对应的关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"Grade"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"g_id"</span> <span class="attr">property</span>=<span class="string">"gId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"g_name"</span> <span class="attr">property</span>=<span class="string">"gName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.school.dao.StudentMapper"</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.dlnu.school.pojo.Student"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"s_id"</span> <span class="attr">property</span>=<span class="string">"sId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_name"</span> <span class="attr">property</span>=<span class="string">"sName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_age"</span> <span class="attr">property</span>=<span class="string">"sAge"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多对一关联班级 一个班级有多个学生 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"grade"</span> <span class="attr">javaType</span>=<span class="string">"com.dlnu.school.pojo.Grade"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"g_id"</span> <span class="attr">property</span>=<span class="string">"gId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"g_name"</span> <span class="attr">property</span>=<span class="string">"gName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询某班级有多少位学生--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStuByGrade"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">select s.s_name,s.s_id </span><br><span class="line">from student s</span><br><span class="line">left OUTER JOIN grade g ON s.`s_gid`=g.`g_id`</span><br><span class="line">where g.g_name = #&#123;gName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Dao层，放入包com.dlnu.school.dao中</p><p>GradeMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.school.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.school.pojo.Grade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GradeMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer gId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Grade grade)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Grade grade)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Grade&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.school.dao;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">import</span> com.dlnu.school.pojo.Student;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer sId)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Student stu)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function">List&lt;Student&gt; <span class="title">queryStuByGrade</span><span class="params">(String gName)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Student stu)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function">List&lt;Student&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试，根据班级名称查班级的学生名字。因为我们主要查的是学生的信息，应把sql语句写在学生的映射文件中。</p><p>测试前请查看mybatis-config.xml和db-config.properties文件导入和是否修改相应位置，还要导入相应jar包</p><p>TestStudent.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.school.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.school.dao.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.dlnu.school.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line"><span class="comment">// Mybatis 配置文件</span></span><br><span class="line"><span class="keyword">private</span> String fileName = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testqueryStuByGrade</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得mapper对象</span></span><br><span class="line">StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询sql班级的学生</span></span><br><span class="line">List&lt;Student&gt; list = mapper.queryStuByGrade(<span class="string">"sql"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Student student1 : list) &#123;</span><br><span class="line">System.out.println(student1.getsName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p></li></ul></li></ol><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200619211945786.png"  alt="image-20200619211945786"></p><ol start="3"><li><p>多对多</p><ul><li><p>设计数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">  c_id <span class="built_in">int</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  c_name <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  <span class="string">`c_credit`</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  s_id <span class="built_in">int</span>(<span class="number">11</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  s_name <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  s_age <span class="built_in">int</span>(<span class="number">11</span>) </span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc (</span><br><span class="line">  s_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">  c_id <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line">  grade <span class="built_in">int</span>(<span class="number">11</span>) ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (s_id,c_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> sc_ibfk_1 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (s_id) <span class="keyword">REFERENCES</span> student (s_id),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> sc_ibfk_2 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (c_id) <span class="keyword">REFERENCES</span> course (c_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> student(s_id,s_name,s_age) <span class="keyword">values</span> (<span class="number">20201</span>,<span class="string">'sam'</span>,<span class="number">20</span>),(<span class="number">20202</span>,<span class="string">'john'</span>,<span class="number">21</span>),(<span class="number">20203</span>,<span class="string">'lili'</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> course(c_id,c_name,c_credit) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'sql'</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="string">'java'</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="string">'c++'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> sc(s_id,c_id,grade) <span class="keyword">values</span> (<span class="number">20201</span>,<span class="number">3</span>,<span class="number">85</span>),(<span class="number">20202</span>,<span class="number">2</span>,<span class="number">88</span>),(<span class="number">20203</span>,<span class="number">1</span>,<span class="number">90</span>);</span><br></pre></td></tr></table></figure><ul><li><p>导入jar包（目录如下）</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200617230246519.png"  alt="image-20200617230246519"></p></li><li><p>配置文件</p><p>mybatis-config.xml，用来配置 Mybatis 的运行环境、数据源、事务等。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用外部配置文件路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db_config.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实体类的别名，将包内的 Java 类的类名作为类的类别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.sc.pojo.Course"</span> <span class="attr">alias</span>=<span class="string">"Course"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.sc.pojo.Student"</span> <span class="attr">alias</span>=<span class="string">"Student"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.dlnu.sc.pojo.SC"</span> <span class="attr">alias</span>=<span class="string">"SC"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 环境配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type="JDBC"表示使用JDBC的提交和回滚--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--type="POOLED"表示支持JDBC数据库连接池  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池由MyBatis管理，数据库名是mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射文件路径 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 mapper 接口包加载整个包的映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/sc/mapper/CourseMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/sc/mapper/StudentMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/dlnu/sc/mapper/SCMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>db_config.properties，用于存放数据库连接参数</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/stu_course</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>log4j.properties，日志记录文件方便查看控制台输出的 SQL 语句</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout  </span></span><br><span class="line"><span class="meta">log4j.logger.com.abc.mapper</span>=<span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout  </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n  </span></span><br><span class="line"> </span><br><span class="line"><span class="meta">log4j.category.org.springframework</span> = <span class="string">OFF</span></span><br></pre></td></tr></table></figure></li><li><p>实体，放入包com.dlnu.sc.pojo中</p><p>Course.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer cId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String cName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer cCredit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Student&gt; student;</span><br><span class="line"><span class="keyword">private</span> List&lt;SC&gt; sc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(Integer cId, String cName, Integer cCredit, List&lt;Student&gt; student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.cId = cId;</span><br><span class="line"><span class="keyword">this</span>.cName = cName;</span><br><span class="line"><span class="keyword">this</span>.cCredit = cCredit;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getcId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcId</span><span class="params">(Integer cId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cId = cId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getcName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcName</span><span class="params">(String cName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cName = cName == <span class="keyword">null</span> ? <span class="keyword">null</span> : cName.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getcCredit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cCredit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setcCredit</span><span class="params">(Integer cCredit)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cCredit = cCredit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(List&lt;Student&gt; student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"cId="</span> + cId + <span class="string">", cName="</span> + cName + <span class="string">", cCredit="</span> + cCredit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer sId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String sName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer sAge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;SC&gt; sc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer sId, String sName, Integer sAge, List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.sId = sId;</span><br><span class="line"><span class="keyword">this</span>.sName = sName;</span><br><span class="line"><span class="keyword">this</span>.sAge = sAge;</span><br><span class="line"><span class="keyword">this</span>.courses = courses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getsId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsId</span><span class="params">(Integer sId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sId = sId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getsName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsName</span><span class="params">(String sName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sName = sName == <span class="keyword">null</span> ? <span class="keyword">null</span> : sName.trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getsAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setsAge</span><span class="params">(Integer sAge)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sAge = sAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">getCourses</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> courses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.courses = courses;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SC&gt; <span class="title">getSc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSc</span><span class="params">(List&lt;SC&gt; sc)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sc = sc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Student [sId="</span> + sId + <span class="string">", sName="</span> + sName + <span class="string">", sAge="</span> + sAge + <span class="string">", courses="</span> + courses + <span class="string">", sc="</span> + sc</span><br><span class="line">+ <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SC.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Student student;</span><br><span class="line"><span class="keyword">private</span> Course course;</span><br><span class="line"><span class="keyword">private</span> Integer grade;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SC</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SC</span><span class="params">(Student student, Course course, Integer grade)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line"><span class="keyword">this</span>.course = course;</span><br><span class="line"><span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Integer grade)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.student = student;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Course <span class="title">getCourse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> course;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourse</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.course = course;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"grade="</span> + grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>映射文件，放入包com.dlnu.sc.mapper中</p><p>CourseMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.sc.dao.CourseMapper"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"Course"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">property</span>=<span class="string">"cName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_credit"</span> <span class="attr">property</span>=<span class="string">"cCredit"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>StudentMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.sc.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.dlnu.sc.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"s_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"sId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"sName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"s_age"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"sAge"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联映射：collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"courses"</span> <span class="attr">ofType</span>=<span class="string">"Course"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">column</span>=<span class="string">"c_id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cName"</span> <span class="attr">column</span>=<span class="string">"c_name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cCredit"</span> <span class="attr">column</span>=<span class="string">"c_credit"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 多对多关联映射：collection --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"sc"</span> <span class="attr">ofType</span>=<span class="string">"SC"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"grade"</span> <span class="attr">column</span>=<span class="string">"grade"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 查询所有学生及他们的课程的信息和成绩 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryStudentCourse"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        select s.*,c.*,sc.*</span><br><span class="line">        from student s,course c,sc</span><br><span class="line">        where s.s_id=sc.s_id and c.c_id=sc.c_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SCMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.dlnu.sc.dao.SCMapper"</span> &gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"SC"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"s_id"</span> <span class="attr">property</span>=<span class="string">"sId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"grade"</span> <span class="attr">property</span>=<span class="string">"grade"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Dao层，放入包com.dlnu.sc.dao中</p><p>CourseMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.sc.pojo.Course;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Course course)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Course&gt; <span class="title">query</span><span class="params">(Integer cId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Course course)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.sc.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Integer sId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Student stu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">query</span><span class="params">(Integer sId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Student stu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">queryStudentCourse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试，查询所有学生信息、课程信息和成绩。</p><p>测试前请查看mybatis-config.xml和db-config.properties文件导入和是否修改相应位置，还要导入相应jar包</p><p>TestStudent.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dlnu.sc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dlnu.sc.dao.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.dlnu.sc.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line"><span class="comment">// Mybatis 配置文件</span></span><br><span class="line"><span class="keyword">private</span> String fileName = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testqueryStuByGrade</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream is = Resources.getResourceAsStream(fileName);</span><br><span class="line"><span class="comment">// 获得一个链接工厂对象 用于产生数据库连接</span></span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line"><span class="comment">// 获得数据库连接Session对象 （相当于Connection）</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得mapper对象</span></span><br><span class="line">StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; list = mapper.queryStudentCourse();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Student stu : list) &#123;</span><br><span class="line">System.out.println(stu.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200620222728956.png"  alt="image-20200620222728956"></p></li></ul></li></ul></li></ol><h3 id="动态sql"><a class="markdownIt-Anchor" href="#动态sql"></a> 动态SQL</h3><p>开发人员在使用JDBC或其他框架进行数据库开发时，通常要根据需求去手动拼装SQL，这样容易出错，而MyBatis提供的对SQL语句动态组装的功能，恰能很好的解决这个问题。</p><p>MyBatis 常用的动态 SQL 元素包括：</p><p><img src="/" class="lazyload" data-src="/2020/06/14/MyBatis/C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200621224843743.png"  alt="image-20200621224843743"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="MyBatis" scheme="https://zshuhan.github.io/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="https://zshuhan.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（四）之网络层</title>
    <link href="https://zshuhan.github.io/2020/05/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://zshuhan.github.io/2020/05/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2020-05-14T07:51:15.070Z</published>
    <updated>2020-05-17T09:30:43.005Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h2><h3 id="网络层的功能"><a class="markdownIt-Anchor" href="#网络层的功能"></a> 网络层的功能</h3><h4 id="异构网络互联"><a class="markdownIt-Anchor" href="#异构网络互联"></a> 异构网络互联</h4><ul><li><p>网络的互联：指将两个以上的计算机网络，通过一定的方法， 用一种或多种通信处理设备(即中间设备)相互联接起来，以构成更大的网络系统。中间设备又称为中间系统或中继系统。</p></li><li><p>根据中继系统所在层次，有以下四种不同的中继系统。<br>1)物理层中继系统:中继器，集线器(Hub)。<br>2)数据链路层中继系统:网桥或交换机。<br>3)网络层中继系统:路由器。<br>4)网络层以上的中继系统:网关。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用物理层或数据链路层的中继系统时，仅仅是把一一个网络扩大了，而从网络层的角度看，它仍然是同一-个网络，一般并不称之为网络互联。因此网络互联通常是指用路由器进行网络互联和路由选择。路由器就是一台专用计算机，用于在互联网中进行路由选择。</span><br></pre></td></tr></table></figure></li></ul><h4 id="路由与转发"><a class="markdownIt-Anchor" href="#路由与转发"></a> 路由与转发</h4><p>路由器主要完成两个功能:一个是路由选择(确定哪-条路径)， 另一个是分组转发(当一个分组到达时所采取的动作)。路由选择是根据特定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。转发是处理通过路由器的数据流，关键操作是转发表查询、转发以及相关的队列管理和任务调度等。</p><ul><li>路由选择:指按照复杂的分布式算法，根据从各相邻路由器所得到的关于整个网络拓扑的变化情况，动态地改变所选择的路由。</li><li>分组转发:指路由器根据转发表将用户的IP数据报从合适的端口转发出去。<br>路由表是根据路由选择算法得出的，而转发表是从路由表得出的。转发表确定在本路由器如何转发分组。转发表的结构应当使查找过程最优化，路由表则需要对网络拓扑变化的计算最优化。</li></ul><h4 id="网络层提供的两种服务"><a class="markdownIt-Anchor" href="#网络层提供的两种服务"></a> 网络层提供的两种服务</h4><p>虚电路服务与数据报服务的对比如下：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020051717073576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>虚电路：一条从源主机到目的主机的路径</p><h3 id="路由算法"><a class="markdownIt-Anchor" href="#路由算法"></a> 路由算法</h3><h4 id="静态路由和动态路由"><a class="markdownIt-Anchor" href="#静态路由和动态路由"></a> 静态路由和动态路由</h4><p>路由器转发分组是通过路由表转发的，而路由表是通过各种算法得到的。</p><p>从能否随网络的通信量或拓扑自适应地进行调整变化来划分，路由算法可分为两大类：</p><ol><li>静态路由算法(又称为非自适应路由算法)：指由网络管理员手工添加和维护路由表。不适用于大型和复杂的网络环境。</li><li>动态路由算法(又称为自适应路由算法)：指路由器上的路由表项是通过相互联接的路由器之间彼此交换信息，然后按照一定的算法优化出来的，而这些路由信息是在一定时间间腺里不断更新，以适应不断变化的网络，以随时获得最优的寻路效果。常用的动态路由算法可分为两类:距离-向量路由算法和链路状态路由算法。</li></ol><h4 id="距离-向量路由算法"><a class="markdownIt-Anchor" href="#距离-向量路由算法"></a> 距离-向量路由算法</h4><p>在距离-向量路由算法中，所有的结点都定期地将它们的整个路由选择表传送给所有与之直接相邻的结点。这种路由选择表包含：</p><ul><li>每条路径的目的地(另一结点)。</li><li>路径的代价(也称距离)。</li></ul><p>在距离-向量路由算法中，<strong>所有</strong>的结点都必须参与距离向量交换，<strong>以保证路由的有效性和一致性</strong>，也就是说，所有的结点都监听从其他结点传送来的<strong>路由选择更新信息</strong>，并在下列情况下<strong>更新它们的路由选择表</strong>：</p><ul><li><p>被通告一条新的路由，该路由在本结点的路由表中<strong>不存在</strong>，此时本地系统加入这条新的路由。</p></li><li><p>发送来的路由信息中有一条到达某个目的地的路由，该路由比当前使用的路由有较短的距离(较小的代价)。此种情况下，就用经过发送路由信息的结点的新路由替换路由表中达到那个目的地的现有路由。</p></li></ul><p>距离-向量路由算法的实质：迭代计算一条路 由中的站段数或延迟时间，从而得到到达一个目<br>标的最短(最小代价)通路。</p><p>最常见的距离-向量路由算法：RIP算法，它采用“跳数”作为距离的度量。</p><h4 id="链路状态路由算法"><a class="markdownIt-Anchor" href="#链路状态路由算法"></a> 链路状态路由算法</h4><p>链路状态路由算法：要求<strong>每个</strong>参与该算法的<strong>结点</strong>都有<strong>完全的网络拓扑信息</strong>，它们执行下述两项任务。第一，<strong>主动</strong>测试<strong>所有</strong>邻接结点的状态。第二，<strong>定期</strong>地将链路状态传播给所有其他的结点(或称路由结点)，而不仅仅是其邻接结点。</p><p>典型的链路状态算法是OSPF算法。</p><p>每当链路状态报文到达时，路由结点便使用这些状态信息去更新自己的网络拓扑和状态“视野图”，一旦链路状态发生了 变化，结点对更新了的网络图利用Dijsktra最短路径算法重新计算路由，从单一的源出发计算到达所有目的结点的最短路径。</p><p>链路状态路由算法主要有三点特征：</p><ul><li>使用泛洪法向本自治系统中所有路由器发送信息，即路由器通过所有端口向所有相邻的路由器发送信息。</li><li>发送的信息就是与路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。</li><li>只有当链路状态发生变化时，路由器才向所有路由器发送此消息。</li></ul><p>链路状态路由算法的优点：每个结点独立计算路径，易于查找故障，链路状态报文大小与网络中路由结点数无关，规模可伸展。</p><h4 id="层次路由"><a class="markdownIt-Anchor" href="#层次路由"></a> 层次路由</h4><p>随着网络规模扩大，路由表变大，查找路由表变慢，传递路由表占用更大带宽，因此路由选择层次方式进行</p><p>OSPF 将-自治系统划分出域，路由器只知道本区域路由细节，不知道其他区域的路由细节。</p><p>层次路由降低区域内路由信息通信量，但增加了交换信息的种类，适用于规模很大的自治系统。</p><h3 id="ipv4"><a class="markdownIt-Anchor" href="#ipv4"></a> IPv4</h3><h4 id="ipv4分组"><a class="markdownIt-Anchor" href="#ipv4分组"></a> IPv4分组</h4><blockquote><p>​IPv4=IP协议（版本为4）。IPv4,即现在普遍使用的IP协议(版本为4)。IP 协议定义数据传送的基本单元一-IP 分组及其确切的数据格式</p></blockquote><ul><li><p>IPv4分组的格式</p><p>一个IP分组由首部和数据两部分组成。首部的前一部分是固定长度的， 共20字节，是所有<br>IP分组必须具有的。在首部固定部分的后面是一些可选字段， 其长度是可变的，用来提供错误检<br>测及安全等机制。</p><p>IP 数据报的格式如下图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200517170820694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>IP首部各字段含义：</p><ul><li><p>版本：IP协议的版本，目前广泛使用的版本号为4。</p></li><li><p>首部长度：占 4 位，可表示的最大数值。是 15 个单位(一个单位为 4 字节)，因此 IP 的首部长度的最大值是 60 字节</p></li><li><p>区分服务：占 8 位，用来获得更好的服务。在旧标准中叫做服务类型，但实际上一直未被使用过。1998 年这个字段改名为区分服务。</p></li><li><p>总长度：占 16 位，指首部和数据之和的长度，单位为字节，因此数据报的最大长度为 65535 字节。总长度必须不超过最大传送单元 MTU。</p></li><li><p>标识：占16位。它是一个计数器，用来产生 IP 数据报的标识报。</p></li><li><p>标志：占 3 位，目前只有前两位有意义。标志字段的最低位是 MF (More Fragment)。MF = 1 表示后面“还有分片”。MF =0 表示最后一个分片。标志字段中间的一位是 DF (Don’t Fragment) 。只有当 DF = 0 时才允许分片。</p></li><li><p>片偏移： 占13 位，指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位。</p></li><li><p>生存时间：占8 位，记为 TTL (Time To Live)，指示数据报在网络中可通过的路由器数的最大值。</p></li><li><p>协议：占8 位，指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给那个处理过程</p></li><li><p>首部检验和：占16 位，只检验数据报的首部，不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p></li><li><p>源地址：占4 字节，标识发送方的IP地址。</p></li><li><p>目的地址：占4 字节，标识接收方的IP地址。</p></li><li><p>选项字段：用来支持排错、测量以及安全等措施，内容很丰富。选项字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。</p></li></ul></li></ul><ol start="2"><li>IP数据报分片</li></ol><p>一个链路层数据报能承载的最大数据量称为最大传送单元(MTU)。因为IP数据报被封装在链路层数据报中，故链路层的MTU严格地限制着IP数据报的长度，而且在IP数据报的源与目的地路径上的各段链路可能使用不同的链路层协议，有不同的MTU.例如，以太网的MTU为1500字节，而许多广域网的MTU不超过576字节。</p><p>当IP数据报的总长度大于链路MTU时，就需要将IP数据报中的数据分装在两个或更多个较小的IP数据报中，这些较小的数据报叫做片。</p><p>IP分片：</p><ul><li><p>大IP分组向较小MTU链路转发时，可以被分片</p></li><li><p>1个IP分组分为多片分组</p></li><li><p>IP分片在目的地的网络层被重新组装。目的主机使用IP首部中的标识、标志和片偏移字段来完成对片的重组。</p></li></ul><p>当创建一个 IP数据报时，源主机为该数据报加上一个标识号。 当一 个路由器需要将一个数据报分片时，形成的每个数据报(即片)都具有原始数据报的标识号。当目的主机收到来自同一发送主机的一批数据报时，它可以通过检查数据报的标识号以确定哪些数据报是属于同一个原始数据报的片。IP首部中的标志位有3个比特，但只有后2个比特有意义，分别是MF位和DF位(Don’t Fragment)。只有当DF=0时，该IP 数据报才可以被分片。MF则用来告知目的主机该IP数据报是否为原始数据报的最后一个片。当MF=1时，表示相应的原始数据报还有后续的片:当MF=0时，表示该数据报是相应原始数据报的最后-一个片。 目的主机在对片进行重组时，使用片偏移字段来确定片应放在原始IP数据报的哪个位置。</p><pre><code>IP分片涉及一定的计算。 例题：考虑向一条具有1500字节的MTU的链路发送一个8000字节的数据报(首部20字节，数据部分7980字节)，假定初始化数据报具有序列号321，这将会生成多少个片？它们的特征是什么？ 答：因为IP数据报首部占20字节，因此在每个分片中片的大小是1500-20=1480个字节，故原始数据报中7980字节数据必须被分配到7980/1480=6个片中。3980字节数据必须被分配到3个独立的片中(每个片也是一一个IP数据报)。由于偏移值的单位是8字节，所以除了最后一个片外，其他所有片中的有效数据载荷都是8的倍数。每个片的标识号都为321.前5个片的MF=1（还有分片），最后一个片的MF=0（表示最后一个分片）</code></pre><ol start="3"><li><p>网络层转发分组</p><p>网络层的路由器执行的分组转发算法如下:</p><ul><li>从数据报的首部提取目的主机的IP地址D,得出目的网络地址为N。</li><li>若网络地址N直接与路由器相连，则直接将数据报交付目的主机D,这就叫路由器的直接交付;否则是间接交付</li><li>若路由表中有到达网络N的路由，则根据路由表转发该数据报</li><li>若路由表中有一个默认路由，则发送默认路由器</li><li>若以上234都失败，则报告转发分组出错。</li></ul></li></ol><h4 id="ipv4地址与nat"><a class="markdownIt-Anchor" href="#ipv4地址与nat"></a> IPv4地址与NAT</h4><ol><li><p>IPv4地址</p><p>IP地址：连接在Internet中的每一台主机(或路由器)都分配一个 32比特的全球唯一的标识符。</p><p>传统的IP地址是分类的地址，分为A、B、 C、D、E五类。<br>无论哪类IP地址，都由网络号和主机号两部分组成。即IP地址:= {&lt;网络号&gt;，&lt;主机号&gt;}。其中网络号标志主机(或路由器)所连接到的网络。一个网络号在整个因特网范围内必须是唯一的。主机号标志该主机(或路由器)。一个主机号在它前面的网络号所指明的网络范围内必须是唯- 一的。由此可见，一个IP地址在整个因特网范围内是唯-一的。</p></li></ol><ul><li><p>五类IP地址的网络号字段和主机号字段：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200517171202909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>A、B、C类为单播地址；DE类为多播地址。</p><p>A类：回送地址；它的IP地址范围为：1.0.0.1~127.255.255.254</p><p>B类：IP地址范围为：128.1.0.1~191.255.255.254</p><p>C类：IP地址范围为：192.0.1.1~233.255.255.254</p></li></ul><ol start="2"><li><p>特殊的IP地址</p><p>在各类IP地址中，有一些IP地址用于表示特殊用途，不用于做主机IP地址：<br>1).主机号全为0表示本网络本身。例如，203.78.164.0</p><p>2).主机号全为1表示本网络的广播地址，又称直接广 播地址。例如,202.98.174.255</p><p>3).127.0.0.0 用于环路自检，此地址表示任意主机本身，目的地址为环回地址的IP数据报永远不会出现在任何网络上。</p><p>4).32位全为0，即0.0.0.0表示本网络上的本主机。</p><p>5).32位全为1，即555.255.255表示整个TCP/IP网络的广播地址，又称受限广播地址。实际使用时由于路由器对广播域的隔离，255255.2555 等效为本网络的广播地址。</p></li><li><p>IP地址特点</p><p>1). 网络信息中心在分配IP地址时只分配网络号(第一级)， 而主机号(第二级) .则由得到该网络的单位自行分配，方便了IP地址的管理</p><p>2). 路由器仅根据目的主机所连接的<strong>网络号</strong>来转发分组(而不考虑目标主机号)，从而减小了路由表所占的存储空间</p><p>3).当一个主机同时连接到两个网络时，该主机就必须同时具有两个相应的IP地址，每个IP地址的网络号必须与所在网络的网络号相同，且这两个IP地址的网络号是不同的。因此IP网络上的一一个路由器必然至少应当具有两个IP地址(路由器每个端口必须至少分配-一个IP地址)</p><p>4).用转发器或桥接器(网桥等)连接起来的若干个LAN仍然是同一个网络(同一个广 播域)，因此该LAN中所有主机的IP地址的网络号必须相同，但主机号必须不同。</p><p>5).在同一个局域网上的主机或路由器的IP地址中的网络号必须是一样的。</p></li><li><p>网络地址转换（NAT）</p><blockquote><p>网络地址转换(NAT)：通过将专用网络地址(如企业内部Intranet) 转换为公用地址(如<br>Intemnet),从而对外隐藏了内部管理的IP地址。它使得整个专用网只需要一个全球IP地址就可以<br>与因特网连通，由于专用网本地IP地址是可重用的，所以NAT大大节省了IP地址的消耗。同时，<br>它隐藏了内部网络结构，从而降低了内部网络受到攻击的风险。</p></blockquote></li></ol><ul><li>​私有地址不能直接用于Internet，要通过NAT转换为全球IP地址后才能用于Internet。所有路由器对目的地址是私有地址数据报一律不转发</li><li>使用NAT时需要在专用网连接到因特网的路由器上安装NAT软件，NAT路由器至少有一个有效的外网地址。当使用本地地址的主机在和外界通信时，NAT 路由器使用NAT转换表将本地地址转换成全球地址，或将全球地址转换成本地地址。NAT转换表中存放着{本地IP地址:端口}到{全球IP地址:端口}的映射。通过{ip地址:端口}这样的映射方式，就可以让多个私有IP地址映射到同一个全球IP地址。</li><li>普通路由器在转发IP数据报时，不改变其源IP 地址和目的IP地址。而NAT路由器<br>在转发IP数据报时要根据地址转换表更换地址。</li></ul><h4 id="子网划分与子网掩码-cidr"><a class="markdownIt-Anchor" href="#子网划分与子网掩码-cidr"></a> 子网划分与子网掩码、CIDR</h4><ol><li><p>子网划分</p><p>子网划分：在IP地址中增加一个“子网号”字段，使IP地址变成3级。</p><p>子网划分的基本思路：</p><p>1). 划分子网是内网范畴，子网不知子网划分。</p><p>2). 从主机号借用若千个比特作为子网号，IP地址变成{&lt;网络号&gt;，&lt;子网号&gt;，&lt;主机号&gt;}。</p><p>3).原子网号不能全为0或全为1，现随着CIDR的广泛使用，子网号也可以全为0或全为1了，但要求路由器有软件支持。</p><p>4).无论IPv4还是CIDR，主机号全为0或全为1都不能分配。主机号全是0是子网网络号，主机号全是1是子网广播地址。</p></li><li><p>子网掩码</p><p>​为了告诉主机或路由器对一个A类、B类、C类网络进行了子网划分，使用子网掩码来表达对原网络中主机号的借位。</p><p>​<strong>子网掩码</strong>：一个与IP地址相对应的长32bit的二进制串，它由一串 1和跟随的一串 0组成。其中，1对应于IP地址中的网络号及子网号，而0对应于主机号。IP地址与子网掩码相与得到的是子网的网络号。</p><p>使用子网掩码特征：<br>① 主机除了设置IP地址，必须设置子网掩码<br>② 一个子网下的所有主机和路由器对应端口，有相同子网掩码<br>③路由器表的记录：目的网络地址：子网掩码：下一跳地址</p><p>使用子网掩码时路由器的分组转发算法如下：</p><ul><li>从分组的首部中提取目的IP地址，用各网络子网掩码与IP相与，若有匹配的相应网络地址，则直接传递到主机。</li><li>若路由表中有目的IP特定路由，则转发到下一跳</li><li>IP地址和路由表中各子网掩码相与，若有匹配的目的网络地址，则转发到下一跳</li><li>若路由表中有一个默认路由，则将分组传送给路由表中所指明的默认路由器；否则，报告转发分组出错。</li></ul></li><li><p>无类编址CIDR</p><blockquote><p>无分类域间路由选择(CIDR)：是在变长子网掩码的基础上提出的-种消除传统A、B、C类<br>网络划分，在软件的支持下实现超网构造的一种IP 地址的划分方法。</p></blockquote><p>CIDR的主要特点：</p><ul><li>使用网络前缀代替子网概念， 两级CIDR为&lt;网络前缀，主机号&gt;。CIDR使用“斜线记法”（CIDR 记法），即IP地址/网络前缀占用比特数。CIDR不使用子网是指没有指明子网字段，但组织内部扔可划分子网</li><li>将网络前缀都相同的连续的IP地址组成“CIDR地址块”。一个CIDR地址块可以表示很多地址，这种地址的聚合称为路由聚合（或称为构成超网）。</li></ul><p>CIDR前缀越短，主机号越长，可分配地址越多，计算时注意去掉全0或全1的地址</p><p>最长前缀匹配：路由表项目为&lt;网络前缀，下一跳地址&gt;，查找时若有多个匹配项，则选前缀最长的</p><p>CIDR查找路由表的方法:为了进行更加有效的查找最长前缀匹配，通常是将无分类编址的路由表存放在一种层次的数据结构中，然后自上而下地按层次进行查找。这里最常用的数据结构就是二叉线索。</p></li></ol><h4 id="arp协议-dhcp协议与icmp协议"><a class="markdownIt-Anchor" href="#arp协议-dhcp协议与icmp协议"></a> ARP协议、DHCP协议与ICMP协议</h4><ol><li><p>IP地址与硬件地址</p><p>① 网络层只能看到抽象的IP数据报分组<br>② 虽然IP首部有完整的源IP和目的IP，但路由选择时只需要目的IP<br>③数据链路层只能看到帧</p></li><li><p>地址解析协议（ARP）</p><p>ARP地址解析协议<strong>完成IP地址转换到MAC地址</strong>。</p><p>每个主机都设有一个 ARP高速缓存,存放本局域网上各主机和路由器的IP地址到MAC地址的映射表，称ARP表。使用ARP协议来动态维护此ARP表。</p></li></ol><ul><li>工作原理：主机A向主机B发送IP数据报，先在其ARP高速缓存中查看有无主机B的IP地址。如有，就可查出其对应的硬件地址写入MAC帧。如果没有，就通过使用目的MAC地址为全F的帧来封装并广播ARP请求分组，可以使同一个局域网里的所有主机收到ARP请求。当主机B收到该ARP请求后，就会向主机A发出响应ARP分组，分组中包含主机B的IP与MAC地址的映射关系，主机A在收到后将此映射写入ARP缓存中，然后按查询到的硬件地址发送MAC帧。ARP协议由于“看到了”IP地址，所以它工作在网络层，而NAT路由器由于“看到了”端口，所以它工作在传输层。</li></ul><ol start="3"><li><p>动态主机配置协议（DHCP）</p><p>DHCP：应用层协议，<strong>基于UDP</strong>，用来<strong>动态分配IP分组</strong></p><p>申请主机广播请求报文，DHCP服务器响应报文并分配IP，该IP是临时IP，有租用时间。</p></li><li><p>网际控制报文协议ICMP</p><p>ICMP：是网络层协议，使主机和路由器可以报告差错和异常情况。</p><p>ICMP也是IP分组，其报文作为IP分组的数据字段。</p><p>ICMP报文的种类有两种，即ICMP差错报告和ICMP询问报告。</p><p>ICMP差错报告报文用于目标主机或到目标主机路径上的路由器向源主机报告差错和异常情况。共有以下五种类型：</p><ul><li>终点不可达。</li><li>源点抑制（减缓发送速率）</li><li>时间超过（TTL到0）</li><li>参数问题（首部参数）</li><li>改变路由(重定向)</li></ul><p>不应发送 ICMP 差错报告报文的几种情况 ：</p><ul><li><p>IMCP报文差错</p></li><li><p>数据报的后续分片</p></li><li><p>具有多播地址的数据报</p></li><li><p>127.0.0.1或0.0.0.0这样的特殊地址的报文</p></li></ul><p>ICMP常见的应用：</p><ul><li><p>ping：应用层协议，直接使用ICMP协议而不使用TCP和UDP协议，用到ICMP的回送请求和回答报文</p></li><li><p>tracert（traceroute）：工作在网络层，使用ICMP的超时报文</p></li></ul></li></ol><h3 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h3><h4 id="ipv6的主要特点"><a class="markdownIt-Anchor" href="#ipv6的主要特点"></a> IPv6的主要特点</h4><ol><li><p>解决IP消耗的方法：</p><ul><li><p>采用无类编址（CIDR），使IP地址的分配更加合理</p></li><li><p>采用网络地址转换NAT方法以节省全球IP地址</p></li><li><p>采用具有更大地址空间的新版本的IP协议IPv6</p><p>而IPv6是最根本的方法</p></li></ul></li><li><p>IPv6的主要特点：</p><ul><li>更大的地址空间。从32位增加到128位</li><li>扩展的地址层次结构</li><li>灵活的首部格式</li><li>改进选项</li><li>允许协议继续扩充</li><li>支持自动配置</li><li>支持资源的预分配</li></ul></li></ol><h4 id="ipv6地址"><a class="markdownIt-Anchor" href="#ipv6地址"></a> IPv6地址</h4><p>IPv6数据报的目的地址可以是以下三种基本类型地址之一：</p><ul><li>单播：点对点通信</li><li>多播：一点对多点的通信，分组被交付到一组计算机的每一个</li><li>任播:这是IPv6增加的一种类型。目标计算是一组，但只交付给一个，通常是距离最近的一个</li></ul><h3 id="路由协议"><a class="markdownIt-Anchor" href="#路由协议"></a> 路由协议</h3><h4 id="自治系统as"><a class="markdownIt-Anchor" href="#自治系统as"></a> 自治系统AS</h4><p>自治系统(Autononous System, AS)：在单一的技术管理下的一组路由器，而这些路由器使用一种AS内部的路由选择协议和共同的度量以确定分组在该AS内的路由，同时还使用一种 AS内的路由选择协议用以确定分组在AS之间的路由。</p><h4 id="域内路由与域间路由"><a class="markdownIt-Anchor" href="#域内路由与域间路由"></a> 域内路由与域间路由</h4><p>自治系统内部的路由选择称域内路由选择，自治系统之间的路由选择称域间路由选择。</p><p>因特网有两大类路由选择协议：</p><ol><li><p>内部网关协议(Interior Gateway Protocol, IGP)：自治系统内部使用的路由选择协议，如RIP协议和OSPF协议。</p></li><li><p>外部网关协议(External Gateway Protocol, EGP)：自治系统间的协议，如BGP-4。</p></li></ol><h4 id="rip路由协议"><a class="markdownIt-Anchor" href="#rip路由协议"></a> RIP路由协议</h4><ol><li><p>路由信息协议(Rouing Inomation Pocol, RIP) ：一种分布式的基于<strong>距离向量</strong>的路由选择协议。是应用层协议，使用UDP传输数据。</p></li><li><p>RIP协议规定：</p><ul><li><p>要根据距离-向量路由算法维护路由表，规定每30秒广播一个路由更新信息。</p></li><li><p>距离也称为跳数(Hop Count),每经过一个路由器，则距离(跳数)加1。跳数为0表示直接连接。RIP认为跳数最少的路由最好</p></li><li><p>跳数最大值为16，即路由最多只能经过15个路由器，超过16个表示不可达。适用于小型网络</p></li><li><p>RIP中每个网络子网掩码必须相同。RIP2中支持CIDR</p></li></ul></li><li><p>RIP协议的特点</p><ul><li><p>仅和<strong>相邻节点</strong>交换路由表，时间间隔为30秒。</p></li><li><p>路由器交换的信息是当前本路由器所知道的全部信息，即自己的路由表。</p></li><li><p>按固定的时间间隔交换路由信息，如每隔30秒。</p></li><li><p>一开始每路由器只知道相邻节点路由，一次RIP广播后就能知道跳数为1的路由，N次广播后所有的路由器最终知道整个网络的路由表，称RIP最终是收敛的</p></li></ul></li><li><p>距离向量算法（过程）</p><ul><li><p>A收到B发来的RIP报文&lt;C,3&gt;,A将该报文修改为&lt;B,4&gt;</p></li><li><p>若A的路由表中没有C，则将C加入到路由表中。若A的路由表中有C且下一跳是B的话，则更新</p></li><li><p>若A的路由表有C但下一跳不是B的话，看哪个跳数小选哪个</p></li><li><p>若路由表中某个项目180秒没更新过，则将该路由项目距离改为16（不可达）</p></li></ul></li><li><p>RIP的优缺点</p><p>优点：实现简单，开销小，收敛过程较快。</p><p>缺点：一网络出现故障时，收敛变慢，俗称坏消息传的慢；二更新要传递整个路由表，占用带宽大</p></li></ol><h4 id="ospf路由协议"><a class="markdownIt-Anchor" href="#ospf路由协议"></a> OSPF路由协议</h4><ol><li><p>OSPF协议的基本特点</p><p>开放最短路径优先（OSPF）协议，使用链路状态路由算法，是网络层协议。</p></li><li><p>OSPF与RIP协议的区别：</p><ul><li>OSPF使用<strong>洪泛法</strong>向本自治系统中<strong>所有路由器</strong>发送信息。而RIP协议是<strong>仅仅</strong>向自己相邻的<strong>几个路由器</strong>发送信息。</li><li>发送的信息就是与<strong>本路由器相邻</strong>的所有路由器的链路状态。而在RIP协议中，发送的信息是本路由器所知道的<strong>全部信息</strong>，即整个路由表。</li><li>只有当链路状态发生变化时，路由器才用洪泛法向<strong>所有路由器</strong>发送此信息，并且更新过程收敛得快。而在RIP协议中，不管网络拓扑是否发生变化，路由器之间都会<strong>定期</strong>交换路由表的信息。</li><li>OSPF是<strong>网络层协议</strong>，它不使用UDP或TCP而是直接IP数据报传送)。而RIP是应用层协议，它在传输层使用UDP协议。</li></ul></li><li><p>OSPF其他特点：</p><ul><li>OSPF可根据IP分组的不同服务类型设置不同的代价，计算不同的路由，因此十分灵活。</li><li>相同代价的路径间，可以负载平衡。</li><li>交换的分组可鉴别，可用来鉴别路由器，保证了仅在信赖的路由器之间交换链路状态信息。</li><li>支持可变长度的子网划分和无分类编址CIDR。</li><li>每一个链路状态都带上一个32位的序号，序号越大状态就越新。</li></ul></li><li><p>OSPF工作原理：</p><p>路由器间频繁交换链路状态信息，最终构成全网络拓扑结构图。每个路由器根据该图Dijkstra计算最短路径用来构造自己的路由表。当链路状态发生变化时，根据算法更新计算路由表。路由表不会存储完整路劲，只会存储下一跳。</p><p>OSPF可将一个自治系统再划分成更小的域，路由器只知道本域内的网络拓扑，减少整个网上的通信量。</p></li><li><p>OSPF的五种分组类型</p></li></ol><ul><li>问候分组：用来发现和维持邻站的可达性。</li><li>数据库描述分组：向邻接点发出自己数据库中的所有链路状态项目的摘要信息。</li><li>链路状态请求分组：请求发送特定链路状态项目的详细信息。</li><li>链路状态更新分组：用洪泛法对全网更新链路状态，是OSPF核心部分。</li><li>链路状态确认分组：对链路更新分组的确认。</li></ul><ol start="6"><li><p>OSPF工作过程：</p><ul><li>通常每隔10秒交换一次问候分组，确保节点可达。</li><li>刚开始工作时，使用数据库描述分组和相邻路由器交换本数据库中链路状态摘要信息。然后，路由器就使用链路状态请求分组请求发送自己没有的链路。最终同步全网数据库。</li><li>运行时，只要一个路由器的链路状态发生变化，就用洪泛法发送链路状态更新分组。其他路由器在更新后，发送链路状态确认分组对更新分组进行确认。</li></ul></li></ol><h4 id="bgp路由协议"><a class="markdownIt-Anchor" href="#bgp路由协议"></a> BGP路由协议</h4><ol><li><h4 id="边界网关协议bgp"><a class="markdownIt-Anchor" href="#边界网关协议bgp"></a> 边界网关协议（BGP）</h4><p>边界网关协议（BGP）：是不同自治系统的路由器之间交换路由信息的协议。是应用层协议，基于TCP协议，使用路径-向量路由算法（不是距离-向量算法）</p></li><li><p>BGP协议的工作原理：</p><p>每一个自治系统至少一个路由器(可以有多个)作为该自治系统的“BGP发言人”。各发言人之间交换路由信息。交换时要先建立TCP连接，然后交换BGP报文以建立BGP会话，再利用BGP会话交换路由信息。最后各发言人就能找到到达各自治系统的较好路由。</p></li><li><p>BGP协议的特点</p><ul><li><p>BGP交换的节点数是网络中的AS数，明显比AS内节点数小很多</p></li><li><p>每个AS的发言人是很少的，这样自治系统间的路由不会很复杂</p></li><li><p>BGP支持CIDR，因此BGP的路由表也就应当包括目的网络前缀、下一.跳路由器， 以及<br>到达该目的网络所要经过的各个自治系统序列。</p></li><li><p>在BGP刚运行时，BGP的邻站是交换整个的BGP路由表。但以后只需要在发生变化时<br>更新有变化的部分。这样做对节省网络带宽。</p></li></ul></li><li><p>BGP-4共使用4种报文</p><ul><li>打开报文，用来与相邻的另一个BGP发言人建立关系。</li><li>更新报文，用来发送某一路由的信息，以及列出要撤销的多条路由。</li><li>保活报文，用来确认打开报文和周期性地证实邻站关系。</li><li>通知报文，用来发送检测到的差错。</li></ul></li></ol><h3 id="习题"><a class="markdownIt-Anchor" href="#习题"></a> 习题</h3><ol><li><p>某自治系统内采用RIP协议，若该自治系统内的路由器R1收到其邻居路由器R2的距离矢量，距离矢量中包含信息&lt;net1，16&gt;， 则能得出的结论是( )。<br>A. R2 可以经过R1到达netl,跳数为17<br>B. R2可以到达netl, 跳数为16.<br>C. RI可以经过R2到达netl, 跳数为17<br>D. R1不能经过R2到达netl</p><p>【答案】D</p><p>【解析】RI在收到信息并更新路由表后，若需要经过R2到达netl,则其跳数为17,由于距离为16表示不可达，因此R1不能经过R2到达net1, R2也不可能到达netl.B、C错误，D正确。而题目中并未给出R1向R2发送的信息，因此A也不正确。</p></li><li><p>直接封装RIP、OSPF、 BGP报文的协议分别是( )。<br>A. TCP、UDP、IP<br>B. TCP、 IP、 UDP<br>C. UDP. TCP、IP<br>D. UDP、IP、TCP</p><p>【答案】D</p><p>【解析】RIP是一种分布式的基于距离向量的路由选择协议，通过广播UDP报文来交换路由信息。OSPF是一个内部网关协议，要交换的信息量较大，应使报文的长度尽量短，所以不使用传输层协议(如UDP或TCP)，而是直接采用IP。BGP是一个外部网关协议，在不同的自治系统之间交换路由信息，由于网络环境复杂，需要保证可靠传输，所以采用TCP。因此，选D。</p></li><li><p>以下关于RIP的描述中，错误的是( )。<br>A. RIP是基于距离一向量路由选择算法的<br>B. RIP 要求内部路由器将它关于整个AS的路由信息发布出去<br>C. RIP 要求内部路由器向整个AS的路由器发布路由信息<br>D. RIP要求内部路由器按照一定的时间间隔发布路由信息</p><p>【答案】C</p><p>【解析】RIP规定一个路由器只向相邻路由器发布路由信息，而不是像OSPF那样向整个域洪泛。</p></li><li><p>某网络的IP地址空间为192.168.5.0/24, 采用定长子网划分，子网掩码为255.255. 255.248,则该网络中的最大子网个数、每个子网内的最大可分配地址个数分别是( )。<br>A.32, 8<br>B.32， 6<br>C.8, 32<br>D.8, 30</p><p>【答案】B</p><p>【解析】由于该网络的IP地址为192.168.5.0/24,网络号为前24位，后8位为子网号+主机号。子网掩码255.255.255.248,第4个字节248转换成二进制为111000因此后8位中，前5位用于子网号，在CIDR中可以表示2*=32个子网:后3位用于主机号，除去全0和全1的情况，可以表示23-2=6个主机地址。</p></li><li><p>设有下面4条路由: 172.18.129.0/24. 172.18.130.0/24.172.18.132.0/24和172.18.133.0/ 24,如果进行路由聚合，能覆盖这4条路由的地址是( )。<br>A. 172.18.128.0/21<br>B.172. 18.128.0/22<br>C.172.18. 130.0/22<br>D.172.18.132.0/23</p><p>【答案】A</p><p>【解析】4条路由的前24位(3个字节)为网络前缀，前2个字节都- -样，故只需要比较第3个字节即可，129-0000001 130-0000010， 132-10000100， 13310000101。 前5位是完全相同的，因此聚合后的网络的掩码中1的数量应该是8+8+5-21， 聚合后的网络的第3个字节应该是.1000000=128，因此答案为172.18.128.0/21 。</p></li><li><p>若路由器R因为拥塞丢弃IP分组,则此时R可向发出该IP分组的源主机发送的ICMP报文的类型是()。<br>A.路由重定向<br>B.目的不可达<br>C.源抑制<br>D.超时</p><p>【答案】 C<br>【解析】当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。</p></li><li><p>下列IP地址中,只能作为IP分组的源IP地址但不能作为目的IP地址的是()。<br>A.0.0.0.0<br>B.127.0.0.1<br>C.200.10.10.3<br>D.255.255.255.255</p><p>【答案】 A<br>【解析】根据RFC文档描述，0.0.0.0/32可以作为本主机在本网络上的源地址。127.0.0.1是回送地址，以它为目的IP地址的数据将被立即返回到本机。200.10.10.3 是C类IP地址。255.255.255.255 是广播地址。</p></li><li><p>ARP协议的功能是( ).<br>A.根据IP地址查询MAC地址<br>B.根据MAC地址查询IP地址<br>C.根据域名查询IP地址<br>D.根据IP地址查询城名</p><p>【答案】A<br>【解析】在实际网络的数据链路层上传送数据时，最终必须使用硬件地址, ARP协议是将网络层的IP地址解析为数据链路层的MAC地址。</p></li><li><p>若将101.200 16. 0/20划分为5个子网，则可能的最小子网的可分配IP地址数是(）<br>A.126<br>B.254<br>C. 510<br>D.1 022</p><p>【答案】B</p></li><li><p>网络互连时,在由路由器进行互连的多个局域网的结构中，要求每个局域网的( )。<br>A物理层协议可以不同，而数据链路层及数据链路层以上的高层协议必须相同<br>B.物理层、数据链路层协议可以不同，而数据链路层以上的高层协议必须相同<br>C.物理层、数据链路层、网络层协议可以不同，而网络层以上的高层协议必须相同<br>D.物理层数据链路层、网络层及高层协议都可以不同</p><p>【答案】C</p></li><li><p>一个 IPv6的简化写法为8::D0:123 :CDEF :89A，那么它的完整地址应该是( )。<br>A.8000: 0000 :0000 :00D0:1230 :CDEF :89A0<br>B.0008: 0000: 0000: 0000:0123:CDEF:89A0</p><p>C.8000:0000:0000:0000:D000:0123:CDEF:89A0</p><p>D.0008:0000:0000:0000:00D0:0123:CDEF:089A</p></li></ol><p>【答案】A<br>【解析】在实际网络的数据链路层上传送数据时，最终必须使用硬件地址, ARP协议是将网络层的IP地址解析为数据链路层的MAC地址。</p><ol start="12"><li>若将101.200 16. 0/20划分为5个子网，则可能的最小子网的可分配IP地址数是(）<br>A.126<br>B.254<br>C. 510<br>D.1 022</li></ol><p>【答案】B</p><ol start="13"><li><p>网络互连时,在由路由器进行互连的多个局域网的结构中，要求每个局域网的( )。<br>A物理层协议可以不同，而数据链路层及数据链路层以上的高层协议必须相同<br>B.物理层、数据链路层协议可以不同，而数据链路层以上的高层协议必须相同<br>C.物理层、数据链路层、网络层协议可以不同，而网络层以上的高层协议必须相同<br>D.物理层数据链路层、网络层及高层协议都可以不同</p><p>【答案】C</p></li><li><p>一个 IPv6的简化写法为8::D0:123 :CDEF :89A，那么它的完整地址应该是( )。<br>A.8000: 0000 :0000 :00D0:1230 :CDEF :89A0<br>B.0008: 0000: 0000: 0000:0123:CDEF:89A0</p><p>C.8000:0000:0000:0000:D000:0123:CDEF:89A0</p><p>D.0008:0000:0000:0000:00D0:0123:CDEF:089A</p><p>【答案】D</p></li><li><p>考虑向一条具有1500字节的MTU的链路发送一个8000字节的数据报(首部20字节，数据部分7980字节)，假定初始化数据报具有序列号321，这将会生成多少个片？它们的特征是什么？</p></li></ol><p>答：因为IP数据报首部占20字节，因此在每个分片中片的大小是1500-20=1480个字节，故原始数据报中7980字节数据必须被分配到7980/1480=6个片中。3980字节数据必须被分配到3个独立的片中(每个片也是一一个IP数据报)。由于偏移值的单位是8字节，所以除了最后一个片外，其他所有片中的有效数据载荷都是8的倍数。每个片的标识号都为321.前5个片的MF=1（还有分片），最后一个片的MF=0（表示最后一个分片）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（三）之传输层</title>
    <link href="https://zshuhan.github.io/2020/05/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>https://zshuhan.github.io/2020/05/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8B%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
    <published>2020-05-11T04:35:35.959Z</published>
    <updated>2020-05-11T08:50:46.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h2><h3 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200511151703415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-hBMUzpUo-1589181395422)(G:\baidudownload\传输层.png)]"></p><h3 id="传输层协议的概述"><a class="markdownIt-Anchor" href="#传输层协议的概述"></a> 传输层协议的概述</h3><h4 id="进程之间的通信"><a class="markdownIt-Anchor" href="#进程之间的通信"></a> 进程之间的通信</h4><ul><li>运输层：为<u>应用程序</u>之间提供<u>端到端</u>的逻辑通信</li><li>网络层：提供<u>主机</u>之间的逻辑通信</li></ul><p>传输层的功能：分用和复用</p><p>传输层所需的协议：面对连接的TCP和无连接的UDP</p><p>网络层 VS. 传输层<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200511152123181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><h3 id="udp协议"><a class="markdownIt-Anchor" href="#udp协议"></a> UDP协议</h3><h4 id="udp概述"><a class="markdownIt-Anchor" href="#udp概述"></a> UDP概述</h4><ol><li><p>概念</p><p>用户数据报协议（UDP）：在IP 的数据报服务之上增加了<strong>复用</strong>和<strong>分用</strong>的功能及<strong>差错检测</strong>的功能</p></li><li><p>UDP的主要特点</p><ul><li>UDP是<strong>无连接</strong>的，发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延</li><li>UDP 使用<strong>尽最大努力交付</strong>，即不保证可靠交付，因此主机不需要维持复杂的连接状态表</li><li>UDP<strong>是面向报文的</strong>。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP一次交付一个完整的报文</li><li>UDP <strong>没有拥塞控制</strong>，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。很适合多媒体通信的要求</li><li>UDP 支持<strong>一对一、一对多、多对一和多对多的交互通信</strong></li><li>UDP 的<strong>首部开销小</strong>，只有 8 个字节，比 TCP 的 20 个字节的首部要短</li></ul></li></ol><h4 id="udp的首部格式"><a class="markdownIt-Anchor" href="#udp的首部格式"></a> UDP的首部格式</h4><p>​UDP数据报包含两个部分：UDP首部和用户数据</p><p>​UDP首部有8个字节，由4个字段组成，每个字段的长度都是两个字节</p><p>首部格式：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200511152145905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><ul><li>源端口：源端口号，在需要对方回信时选用，不需要时可选用0</li><li>目的端口：目的端口号，在终点交付报文时必须要使用</li><li>长度：UDP用户数据报的长度，其最小值是8（仅有首部）</li><li>检验和：检测UDP用户数据报在传输中是否有错，有错就丢弃</li></ul><h3 id="tcp协议"><a class="markdownIt-Anchor" href="#tcp协议"></a> TCP协议</h3><h4 id="tcp协议的特点"><a class="markdownIt-Anchor" href="#tcp协议的特点"></a> TCP协议的特点</h4><ul><li><strong>面向连接</strong></li><li>每一条 TCP 连接只能<strong>有两个端点 <strong>，每一条 TCP 连接只能是</strong>点对点</strong>的（一对一）</li><li>提供<strong>可靠交付的服务</strong></li><li>提供<strong>全双工</strong>通信</li><li><strong>面向字节流</strong></li></ul><h4 id="tcp报文段"><a class="markdownIt-Anchor" href="#tcp报文段"></a> TCP报文段</h4><p>TCP报文段用于运载数据，建立连接，释放连接和应答。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200511152207823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>各字段意义：</p><ul><li>源端口和目的端口：各占 2字节。端口是运输层与应用层的服务接口。运输层的复用和分用功能都要通过端口才能实现。</li><li>序号：占4字节。 TCP是面向字节流的(就是说TCP传送时是按照一个一个字节来传送的)，所以TCP连接中传送的数据流中的每一个字节都编上一个序号。序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。</li><li>)确认：占4 字节，是期望收到对方的下一个报文段的数据的第一个字 节的序号。若确认号为N，则表示已正确收到序号N-1的报文。</li><li>数据偏移(即首部长度)：占4 位，这里不是IP数据报分片的那个数据偏移，而是表示首部长度，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。</li><li>保留：占6位， 保留为今后使用，但目前应置为0,该字段可以忽略不计。</li><li>紧急位URG：当URG=1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。但是URG需要和紧急指针配套使用，也就是说数据从第-一个字节到紧急指针所指字节就是紧急数据。</li><li>确认位ACK：只有当ACK=1时确认号字段才有效。当ACK=0时,确认号无效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置1。</li><li>推送位PSH(Push) ：接收TCP收到PSH=1的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。</li><li>复位位RST (Reset) ：当RST=1时，表明TCP连接中出现严重差错(如由于主机崩溃或其他因)，必须释放连接，然后再重新建立运输连接。</li><li>同步位SYN：同步 SYN=I表示这是一一个连接请求或连接接收报文。当SYN=I, ACK=0时，表明这是一一个连接请求报文，对方若同意建立连接，则在响应报文中使用SYN=I, ACK=1。即SYN=1 就表示这是一一个连接请求或连接接收报文。</li><li>终止位FIN (Finish)：用来释放-一个连接。 FIN=1 表明此报文段的发送方的数据已发送完毕，并要求释放传输连接。</li><li>窗口：占2 字节。它指出了现在允许对方发送的数据量，接收方的数据缓存空间是有限的，故用窗口值作为接收方让发送方设置其发送窗口的依据，单位为字节。</li><li>)检验和：占2字节。检验和字段检验的范围包括首部和数据这两部分。在计算检验和时，和UDP一样，要在TCP报文段的前面加上12字节的伪首部(只需将UDP伪首部的第4个字段，即协议字段的17改成6,其他的和UDP一样)。</li><li>紧急指针：占16 位，指出在本报文段中紧急数据共有多少个字节(紧急数据放在本报文段数据的最前面)。</li><li>选项：长度可变。TCP最初只规定了一种选项，即最大报文段长度(MaximumSegmen tSize,MSS)。 MSS是TCP报文段中的数据字段的最大长度。</li><li>填充：这是为了 使整个首部长度是4字节的整数倍。</li></ul><h4 id="tcp连接管理"><a class="markdownIt-Anchor" href="#tcp连接管理"></a> TCP连接管理</h4><p>TCP是面向连接的协议。因此每一个TCP连接都有三个阶段:连接建立、数据传送和连接释放。   TCP连接的管理就是使运输连接的建立和释放都能正常进行。</p><p>在TCP连接建立的过程中要解决以下三个问题:</p><ol><li>要使每- -方都能够确知对方的存在。</li><li>要允许双方协商一些参数(如最大窗口值、是否使用窗口扩大选项、时间戳选项以及服务质量等)。</li><li>能够对运输实体资源(如缓存大小、连接表中的项目等)进行分配。</li></ol><p>TCP把连接作为最基本的抽象，每- -条TCP连接有两个端点，TCP连接的端点不是主机,不是主机的IP地址,不是应用进程，也不是传输层的协议端口.TCP连接的端口叫做套接字( socket)或插口。端口拼接到IP地址即构成了套接字。<br>每一条TCP连接唯一地被通信两端的两个端点(即两个套接字)所确定。<br>TCP连接的建立采用客户/服务器方式。主动发起连接建立的应用进程叫做客户机(Client), 而<br>被动等待连接建立的应用进程叫做服务器(Server)。</p><h5 id="tcp的连接建立三次握手"><a class="markdownIt-Anchor" href="#tcp的连接建立三次握手"></a> TCP的连接建立（三次握手）</h5><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020051115223238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>步骤：</p><ol><li>客户机的TCP首先向服务器的TCP发送一个连接请求报文段，设置初始序号，SYN=1,序号=X</li><li>服务器的TCP收到连接请求报文段后，同意建立连接，就向客户机发回确认，并为该TCP连接分配TCP缓存和变量。在确认报文段中，SYN和ACK位都被置为1，确认号字段的值为x+1,并且服务器随机产生起始序号seq=y</li><li>客户机收到确认报文段后，还要向服务器给出确认，并且也要给该连接分配缓存和变量。这个报文段的ACK标志位被置1,序号字段为x+1,确认号字段ack=y+1</li></ol><h5 id="tcp的连接释放四次握手"><a class="markdownIt-Anchor" href="#tcp的连接释放四次握手"></a> TCP的连接释放（四次握手）</h5><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200511152247240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br>步骤：</p><ol><li>客户机打算关闭连接，就向其TCP发送一个连接释放报文段，并停止再发送数据，主动关闭TCP连接，该报文段的FIN标志位被置1, seq=u</li><li>服务器收到连接释放报文段后即发出确认，确认号是ack=u+1,而这个报文段自己的序号是v,等于它前面已传送过的数据的最后一个字节的序号加1. 此时，从客户机到服务器这个方向的连接就释放了，TCP连接处于半关闭状态。</li><li>若服务器已经没有要向客户机发送的数据,就通知TCP释放连接，此时其发出FIN=1的连接释放报文段。</li><li>客户机收到连接释放报文段后，必须发出确认。在确认报文段中，ACK字段被置为1，确认号ack=w+1,序号seq=u+1.此时TCP连接还没有释放掉，必须经过时间等待计时器设置的时间2MSL后，A才进入到连接关闭状态。</li></ol><h5 id="对连接释放的总结"><a class="markdownIt-Anchor" href="#对连接释放的总结"></a> 对连接释放的总结：</h5><p>(1)连接建立<br>分为3步:<br>①SYN=1，seq=x.<br>②SYN=1，ACK=1, seq=y, ack=x+1.<br>③ACK=1，seq=x+1, ack= y+1.<br>(2)释放连接<br>分为4步:<br>①FIN=1, seq=u。<br>②ACK=1, seq=v, ack=u+1.<br>③FIN=1, ACK=1，seq=w， ack=u+1。<br>④ACK=1, seq=u+1, ack-=w+1.</p><h4 id="tcp可靠传输"><a class="markdownIt-Anchor" href="#tcp可靠传输"></a> TCP可靠传输</h4><p>TCP使用了校验、序号、确认和重传等机制来实现可靠传输</p><ol><li>校验：和UDP一样的校验机制</li><li>序号：TCP首部的序号字段用来保证数据能有序提交给应用层</li><li>确认：首部的确认号是期望下次收到的报文的序号。使用累计确认。</li><li>重传：有两种事件会导致TCP对报文段进行重传:超时和冗余ACK。<ul><li>超时：TCP每发送一一个报文段，就对这个报文段设置一次计时器。 只要计时器设置的重传时间到期但还没有收到确认，就要重传这一报文段。</li><li>冗余ACK：超时触发重传存在的一个问题就是超时周期往往太长，发送方可通过冗余ACK检测丢包情况。</li></ul></li></ol><h4 id="流量控制"><a class="markdownIt-Anchor" href="#流量控制"></a> 流量控制</h4><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。利用<strong>滑动窗口协议</strong>的机制可以很方便地在TCP连接上实现对发送方的流量控制。</p><p>接收方根据自己接收缓存大小,动态更新发送方窗口,即窗口字段。表示接收方能接收的最大字节数。发送方根据窗口字段限制自己发送窗口大小。发送窗口实际大小取拥塞窗口中的最小值。</p><h4 id="拥塞控制"><a class="markdownIt-Anchor" href="#拥塞控制"></a> 拥塞控制</h4><ol><li><p>拥塞：在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种现象称为拥塞。</p><p>拥塞出现的原因：∑对资源需求&gt;可用资源</p></li><li><p>拥塞控制：防止过多的数据注入到网络中，使网络中的路由器或链路不致过载。</p><ul><li><p>拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</p></li><li><p>拥塞控制是一 个全局性的过程，涉及到所有的<br>主机、所有的路由器，以及与降低网络传输性<br>能有关的所有因素。</p></li></ul></li><li><p>拥塞控制与流量控制的区别</p><p>​拥塞控制是-一个全局性的过程。但TCP连接的端点只要迟迟不能收到对方的确认信息，就猜想在当前网络中的某处很可能发生了拥塞，但这时却无法知道拥塞到底发生在网络的何处，也无法知道发生拥塞的具体原因。相反，流量控制往往指点对点通信量的控制，是个端到端的问题(接收端控制发送端)。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p></li><li><p>进行拥塞控制需付出的代价</p><ul><li>首先需要获得网络内部流量分布的信息。</li><li>在实施拥塞控制时，还需要在结点之间交换信息和各种命令，以便选择控制的策略和实施控制。这样就产生了额外开销。</li><li>拥塞控制有时需要将一些资源(如缓存、带宽等)分配给个别用户单独使用，这样就使得网络资源不能更好地实现共享。</li></ul></li><li><p>几种拥塞控制的方法</p><p>（1）慢开始<br>​开始发送时令拥窒窗口=1.每收到一个对新的报文的确认就让窗口+1。窗口大小成指数增长,达到上限(阀值)后使用拥塞避免算法</p><p>（2）拥塞避免</p><p>​拥塞窗口每经过一个RTT后+1 ,而不是加倍,变成线性增长。当出现拥塞时，令阀值=当前窗口/2然后设置拥塞窗口=1，再次用慢开始。当窗口&lt;阀值时.使用慢增长。当拥塞窗口&gt;阀值时，改用拥塞避免</p><p>(3) 快重传<br>​可靠传输中的冗余ACK可用于拥塞检测。检测到冗余ACK时直接快速重传</p><p>（4）快恢复<br>​ 当发送端收到连续个冗余ACK后,就把阀值=当前窗口/2。与慢开始不同的是不是把拥塞窗口=1 ,而是将拥塞窗口=当前窗口/2，然后用拥塞避免算法,因而是快恢复</p></li></ol><h3 id="传输层习题"><a class="markdownIt-Anchor" href="#传输层习题"></a> 传输层习题</h3><ol><li><p>主机甲和主机乙已建立了TCP连接，甲始终以MSS=1KB大小的段发送数据，并一直有数据发送;乙每收到一个数据段都会发出一个接收窗口为10KB的确认段。若甲在t时刻发生超时时拥塞窗口为8KB，则从t时刻起，不再发生超时的情况下，经过10个RTT后，甲的发送窗口是(  )。<br>A.10KB B.12KBC.14KB D.15KB</p><p>【答案】A</p><p>【解析】当t时刻发生超时时，把shresh设为8的一半，即为4,且拥塞窗口设为1KB.然后经历10个RTT后，拥塞窗口的大小依次为2、4、 5.6、7、8、9、10、 11. 12, 而发送窗口取当时的拥塞窗口和接收窗口的最小值，而接收窗口始终为10KB,所以此时的发送窗口为10KB,选A.<br>实际上该题接收窗口一直为10KB,可知不管何时，发送窗口一定小于等于10KB, 选项中只有A选项满足条件，可直接得出选A.</p></li><li><p>(  )字段包含在TCP首部中，而不包含在UDP首部中。<br>A.目的端口号<br>B.序列号<br>C.校验和<br>D.目的IP地址</p><p>【答案】B</p><p>【解析】TCP报文段和UDP数据报都包含源端口、目的端口、校验号。由于UDP提供不可靠的传输服务，不需要对报文编号，因此不会有序列号字段，而TCP提供可靠的传输服务，因此需要设置序列号字段。而目的IP地址属于IP数据报中的内容。</p></li><li><p>一个TCP连接的数据传输阶段，如果发送端的发送窗口值由2000变为3000,意味着发送端可以(  ）。<br>A.在收到一个确认之前可以发送3000个TCP报文段<br>B.在收到一个确认之前可以发送1000字节<br>C.在收到一个确认之前可以发送3000字节<br>D.在收到一个确认之前可以发送2000个TCP报文段</p><p>【答案】C</p><p>【解析】TCP提供的是可靠的字节流传输服务，使用窗口机制进行流量控制与拥塞控制。TCP的滑动窗口机制是面向字节的，因此窗口大小的单位为字节。假设发送窗口的大小为N,这意味着发送端可以在没有收到确认的情况下连续发送N个字节。</p></li><li><p>主机甲与主机乙之间已建立一个TCP连接，主机甲向主机乙发送了两个连续的TCP段，分别包含300字节和500字节的有效载荷，第一个段的序列号为200，主机乙正确接收到这两个数据段后，发送给主机甲的确认序列号是( )。<br>A.500<br>B.700<br>C.800<br>D.1000</p><p>【答案】D</p><p>【解析】返回的确认序列号是接收方期待收到对方下一个报文段数据部分的第一-个字 节的序号，因此乙在正确接收到两个段后，返回给甲的确认序列号是200+300+500=1000.</p></li><li><p>主机甲向主机乙发送一个(SYN=I, seq-11220) 的TCP段，期望与主机乙建立TCP连接，若主机乙接受该连接请求，则主机乙向主机甲发送的正确的TCP段可能是( )。<br>A. (SYN=0, ACK=0，seq=11221， ack=11221 )<br>B. (SYN=1， ACK=I, seq=11220， ack-11220 )<br>C. (SYN=1, ACK=1，seq-11221， ack=11221 )<br>D. (SYN=0, ACK=0, seq=11220， ack-11220 )</p><p>【答案】C</p><p>【解析】在确认报文段中，同步位SYN和确认位ACK必须都是1;返回的确认号seq是甲发送的初始序号seq-11220 加1,即ack=11221; 同时乙也要选择并消耗一个初始序号seq, seq 值由乙的TCP进程任意给出，它与确认号、请求报文段的序号没有任何关系。</p></li><li><p>可靠的传输协议中的“可靠”指的是( )。<br>A.使用面向连接的会话<br>B.使用“尽力而为”的传输<br>C.使用滑动窗口来维持可靠性<br>D.使用确认机制来确保传输的数据不丢失<br>【答案】 D<br>【解析】如果-一个协议使用确认机制对传输的数据进行认，那么可以认为是一一个可靠的协议。如果-一个协议用“尽力而为”的传输方式，那么是不可靠的。例如，TCP 对传输的报文段提供确认，因此是可靠的传输协议;而UDP不提供确认，因此是不可靠的传输协议。</p></li><li><p>简述ICMP、 DHCP、 UDP和SMTP作用。<br>答: ICMP：:辅助IP协议正常工作，用以解决差错报告与控制的主要手段。<br>DHCP:集中管理、分配IP地址,便网络环境中的主机动态获得IP地址、DNS服务器地址等信息，并能提供地址的使用率。<br>UDP: 提供无连接、“尽最大努力交付”的教据报传输服务。<br>SMTP:向用户提供高效可靠的邮件传输。</p></li><li><p>在TCP中拥塞控制中，什么是慢开始、拥塞避免、快重传和快恢复算法?这里每一种算法各起什么作用?“乘法减小“和”加法增大&quot;各用在什么情况下?</p><p>答:①慢开始:开始发送时，令拥塞窗口=1.，每收到一个对新的报文的确认后窗口十1。作用: 窗口大小成指数增长，可使分组注入到网络的速率更合理</p><p>②拥塞避免:拥塞离口每经过一个RTT后+1。当窗口&lt;阈值时，使用慢开始;当拥塞窗口&gt;阈值时,改用拥塞避免。作用:便拥塞窗口按线性增长,而不是加信。</p><p>③快重传:可靠传输中的ACK可用于拥塞检测，检测到冗余ACK时直接快速重传。作用:使网络的吞吐量提高</p><p>④快恢复:当发送端收到连续三个冗余ACk后,就把阈值=当前窗口/2，然后用拥塞避免算法。作用:使TCP的性能有明显的改进。</p><p>⑤乘法减小: 只要出现超时或3个重复的确认时，就要把门限值设置为当前拥塞值的一半，并大大减小拥塞窗口的数值</p><p>⑥加法增大：在拥塞阶段,拥塞窗口按线性规律增大</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建免费个人博客</title>
    <link href="https://zshuhan.github.io/2020/04/22/hexo+github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://zshuhan.github.io/2020/04/22/hexo+github%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-04-21T16:28:34.274Z</published>
    <updated>2020-04-21T17:00:58.861Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>欢迎来访！！</p></blockquote><h3 id="1环境说明"><a class="markdownIt-Anchor" href="#1环境说明"></a> 1.环境说明</h3><ol><li>Windows</li><li>node.js</li><li>git</li><li>hexo</li></ol><h3 id="2-搭建github"><a class="markdownIt-Anchor" href="#2-搭建github"></a> 2. 搭建github</h3><p>前提：要有一个github账号（没有的话去注册一个）</p><ol><li>创建仓库<br>在GitHub.com中右上角，点击加号，有个New repository，新建仓库。<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200421232716510.png#pic_center"  alt="在这里插入图片描述"><br>新建一个名为你的用户名.github.io的仓库（一定要是你的用户名），点击create repository（我这里是已经建过了）这样就完成啦！<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000216991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></li></ol><h3 id="3安装"><a class="markdownIt-Anchor" href="#3安装"></a> 3.安装</h3><h4 id="31-安装git"><a class="markdownIt-Anchor" href="#31-安装git"></a> 3.1 安装git</h4><p>进入Git官网下载<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a><br>安装好后，进入Git Bash，用git --version 来查看一下版本<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000244938.png"  alt="在这里插入图片描述"><br>####3.2 安装nodejs<br>官网下载安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs</a><br>安装好后，打开git bash命令行，查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h4 id="33安装hexo"><a class="markdownIt-Anchor" href="#33安装hexo"></a> 3.3安装hexo</h4><p>以上所有都安装完成之后再安装Hexo。依旧打开git bash 输入命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>接着输入 hexo -v 查看版本<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000315571.png"  alt="在这里插入图片描述"></p><p>到此为止，需要的东西都安装完了</p><h4 id="34初始化hexo"><a class="markdownIt-Anchor" href="#34初始化hexo"></a> 3.4初始化hexo</h4><p>创建一个文件夹名为blog（随便吧），然后在这个文件夹下直接右键git bash打开，输入hexo init</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，目录结构图：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000332832.png"  alt="在这里插入图片描述"></p><p>目录说明：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的静态页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：存放主题</li><li>_config.yml: 博客的配置文件</li></ul><p>初始化完成后，会有一个默认主题以及一个hello-word的默认文章。所以我们先打开看看效果，运行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>然后打开浏览器，输入 localhost:4000 就可以浏览我们的博客<br>大概这个样子？<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000418678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>ctrl+c可以把服务关掉</p><h3 id="4上传到github"><a class="markdownIt-Anchor" href="#4上传到github"></a> 4.上传到github</h3><h4 id="配置ssh-key"><a class="markdownIt-Anchor" href="#配置ssh-key"></a> 配置SSH key</h4><p>在git bash中，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"username"</span></span><br><span class="line">$ git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>这里的username输入你自己的GitHub用户名，youremail输入你GitHub的邮箱。</p><p>接着连接公钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最后会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，用记事本打开并复制里面的内容<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000358965.png"  alt></p><p>打开你的github主页，点击头像，进入setting <img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000457613.png"  alt="在这里插入图片描述"></p><p>点击SSH and GPG keys<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020042200052294.png"  alt="在这里插入图片描述"><br>点击右上角的 New SSH key，进入这里<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000538689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"></p><p>回到git bash中，测试是否成功<br>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>以上配置好后，将hexo和GitHub关联起来，打开站点配置文件 _config.yml，找到最后deploy的部分：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>YourgithubName就是你的GitHub名字</p><p>接着打开git bash安装deploy-git部署命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">或者 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>hexo clean清除了你之前生成的东西,可以不加。<br>hexo g 生成静态文章，是hexo generate的缩写<br>hexo d 部署文章，是hexo deploy缩写</p><p>部署完成后，可以在浏览器中输入http://yourname.github.io 就能够访问了你的博客</p><p>你可以设置个人域名（因为我太穷了，你们自行去百度看看吧）</p><h3 id="5hexo的配置"><a class="markdownIt-Anchor" href="#5hexo的配置"></a> 5.hexo的配置</h3><p>1.基本配置<br>打开文件根目录下的_config.yml，对整个hexo架构进行配置<br>网站：<br>（我哭！那是语言！不是语音！！）<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000646579.png"  alt="在这里插入图片描述"><br>网址：<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000702887.png"  alt="在这里插入图片描述"><br>主题：<br>修改主题的位置<img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200422000718805.png"  alt="在这里插入图片描述"><br>theme就是给你的博客选什么主题，从在theme这个文件夹下选，官网上<a href="https://hexo.io/themes/" target="_blank" rel="noopener">【进入】</a>有很多个主题，默认安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。</p><p>我用的主题是butterfly，可以去作者的博客康康，里面有详细的配置。<a href="https://jerryc.me/" target="_blank" rel="noopener">作者</a></p><p>2.新增导航栏选项<br>git bash中执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>它就会在根目录下source文件夹中新建了一个tags文件夹，里面包含index.md文件，在index.md中写上你想要在网站上展示出来的东西。</p><h3 id="6最后"><a class="markdownIt-Anchor" href="#6最后"></a> 6.最后</h3><p>博客到这里就差不多做完啦！再想完善完善的话，多多去康康其他博主的博客叭！扎油！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="博客" scheme="https://zshuhan.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://zshuhan.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（二）之应用层</title>
    <link href="https://zshuhan.github.io/2020/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>https://zshuhan.github.io/2020/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2020-04-17T14:38:36.368Z</published>
    <updated>2020-04-17T14:47:07.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h2><h3 id="网络应用的体系结构"><a class="markdownIt-Anchor" href="#网络应用的体系结构"></a> 网络应用的体系结构</h3><h4 id="客户机服务器结构"><a class="markdownIt-Anchor" href="#客户机服务器结构"></a> 客户机/服务器结构</h4><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020041321341296.png#pic_center"  alt="在这里插入图片描述"><br><em><strong>服务器;</strong></em></p><ol><li>7*24小时提供服务</li><li>永久性访问地址</li><li>利用大量服务器实现可拓展性</li></ol><p><em><strong>客户机：</strong></em></p><ol><li>与服务器通信，使用服务器提供的服务</li><li>间歇性接入网络</li><li>可能使用动态IP地址</li><li>不会与其他客户机直接通信</li></ol><h4 id="p2p结构"><a class="markdownIt-Anchor" href="#p2p结构"></a> P2P结构</h4><ul><li>没有永远在线的服务器</li><li>任意端系统/节点之间可以直接通讯</li><li>节点间歇性接入网络</li><li>节点可能改变IP地址</li></ul><blockquote><p>优点：高度可伸缩 <br>缺点：难于管理</p></blockquote><h4 id="混合结构"><a class="markdownIt-Anchor" href="#混合结构"></a> 混合结构</h4><ul><li>文件传输使用P2P结构</li><li>文件的搜索采用C/S结构—集中式</li></ul><h3 id="网络应用进程通信"><a class="markdownIt-Anchor" href="#网络应用进程通信"></a> 网络应用进程通信</h3><h4 id="进程主机上运行的应用程序"><a class="markdownIt-Anchor" href="#进程主机上运行的应用程序"></a> 进程：主机上运行的应用程序</h4><ul><li><p>同一主机上进程的通信：采用进程间通信机制，由操作系统提供</p></li><li><p>不同主机上进程的通信：消息交换</p></li><li><p>客户机进程：发起通信的进程（发送请求初始化通信）</p></li><li><p>服务器进程：等待通信的进程（等待来自客户的请求）</p></li></ul><h4 id="套接字socketip地址端口号"><a class="markdownIt-Anchor" href="#套接字socketip地址端口号"></a> 套接字：socket=IP地址+端口号</h4><pre><code>套接字是提供应用程序创建和使用的数据结构在应用层，客户进程和服务器进程间的通信是两个套接字间的通信</code></pre><p>①套接字地址（通信时需要）</p><ul><li>本地套接字地址+远程套接字地址 （一对套接字地址标识）<br>定义套接字地址：用TCP/IP协议族的标识符定义</li></ul><p>②寻找套接字地址</p><ul><li>服务器站点：<ul><li>本地套接字地址：由操作系统提供</li><li>远程套接字地址：建立连接的客户套接字地址</li></ul></li><li>客户站点：<ul><li>本地套接字地址：由操作系统提供</li><li>远程套接字地址：知道端口号和IP地址<br>知端口号，不知IP地址</li></ul></li></ul><h3 id="网络应用的需求与传输层服务"><a class="markdownIt-Anchor" href="#网络应用的需求与传输层服务"></a> 网络应用的需求与传输层服务</h3><h4 id="网络应用对传输服务的需求"><a class="markdownIt-Anchor" href="#网络应用对传输服务的需求"></a> 网络应用对传输服务的需求</h4><ul><li>可靠性、带宽、时延</li></ul><h4 id="使用的传输服务"><a class="markdownIt-Anchor" href="#使用的传输服务"></a> 使用的传输服务</h4><p><em><strong>①TCP服务:</strong></em></p><ul><li>面向连接：C/S进程间需要建立连接</li><li>流量控制：发送方不会发送速度过快超过接收方的处理能力</li><li>拥塞控制：当网络负载过重时能够限制发送方的发送速度</li><li>不提供最小带保障</li></ul><p><strong>②UDP服务:</strong></p><ul><li>无连接</li><li>不可靠的数据传输</li><li>不提供可靠性保障、流量控制、拥塞控制、延迟保障、带宽保障</li></ul><h3 id="web应用"><a class="markdownIt-Anchor" href="#web应用"></a> WEB应用</h3><h4 id="万维网www"><a class="markdownIt-Anchor" href="#万维网www"></a> 万维网（WWW）</h4><pre><code>由多个网页互相连接，以客户机/服务器的方式工作</code></pre><h4 id="统一资源定位符url"><a class="markdownIt-Anchor" href="#统一资源定位符url"></a> 统一资源定位符URL</h4><ul><li>一般形式是：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;<br>协议包括ftp、http、News<br>主机是存放资源的主机在互联网的域名</li></ul><h4 id="http协议"><a class="markdownIt-Anchor" href="#http协议"></a> HTTP协议</h4><pre><code>超文本传输协议：采用C/S结构，使用TCP传输服务，端口号80</code></pre><h5 id="主要特点"><a class="markdownIt-Anchor" href="#主要特点"></a> 主要特点：</h5><p>面向事务的客户服务器协议<br>无状态：服务器不维护任何有关客户端过去所发请求的信息<br>无连接</p><h5 id="两类消息"><a class="markdownIt-Anchor" href="#两类消息"></a> 两类消息</h5><h6 id="a请求消息"><a class="markdownIt-Anchor" href="#a请求消息"></a> a)请求消息</h6><p>①从客户向服务器发送报文<br>②通用格式（如图）<br>③上传输入方法：</p><ul><li>POST方法：在请求消息的消息体中上传客户的输入</li><li>URL方法：（使用GET方法）输入信息通过request行的URL字段上传</li></ul><p>④方法类型：</p><ul><li>i.HTTP/1.0 非持久性连接：GET、POST、HEAD</li><li>ii.HTTP/1.1 持久性连接：GET、POST、HEAD、PUT、DELETE</li></ul><h6 id="b响应消息"><a class="markdownIt-Anchor" href="#b响应消息"></a> b)响应消息</h6><p>①从服务器到客户的回答<br>②格式（如图）<br>③HTTP响应状态码：</p><ul><li>1xx表示通知信息</li><li>2xx表示成功</li><li>3xx表示重定向</li><li>4xx表示客户端的差错</li><li>5xx表示服务器的差错</li></ul><h5 id="请求一个万维网文档所需的时间"><a class="markdownIt-Anchor" href="#请求一个万维网文档所需的时间"></a> 请求一个万维网文档所需的时间</h5><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200413213025685.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70#pic_center"  alt="在这里插入图片描述"><br>TotalTime=2RTT+传输文档的时间</p><h5 id="持续连接和非持续连接"><a class="markdownIt-Anchor" href="#持续连接和非持续连接"></a> 持续连接和非持续连接</h5><h6 id="持续连接"><a class="markdownIt-Anchor" href="#持续连接"></a> 持续连接：</h6><ol><li>每个TCP连接允许传输多个对象</li><li>两种工作方式<br>①流水线方式：客户持续发出请求。<br>②非流水线方式：客户只有收到个响应后才能发出下一个请求</li></ol><h6 id="非持续连接"><a class="markdownIt-Anchor" href="#非持续连接"></a> 非持续连接：</h6><pre><code>每个TCP连接最多允许传输一个对象。每个对象需2RTT</code></pre><h5 id="http过程"><a class="markdownIt-Anchor" href="#http过程"></a> HTTP过程</h5><p>(1) URL为http：<a href="//www.abc.com" target="_blank" rel="noopener">//www.abc.com</a>,浏览器分析URL，使用HTTP协议解析。<br>(2) 浏览器向 DNS 请求解析 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a> 的 IP 地址，得到其IP地址。<br>(3)浏览器与服务器建立 TCP 连接，目标端口默认80，发送请求GET。<br>(4) 服务器给出响应，把文件 index.htm 发给浏览器。<br>(5) TCP 连接释放。<br>(6) 浏览器将收到的index.html使用html解释并显示给用户。</p><h3 id="email应用"><a class="markdownIt-Anchor" href="#email应用"></a> Email应用</h3><h4 id="组成结构"><a class="markdownIt-Anchor" href="#组成结构"></a> 组成结构</h4><h5 id="用户代理"><a class="markdownIt-Anchor" href="#用户代理"></a> 用户代理</h5><ul><li>用户与电子邮件系统的接口</li><li>四个功能：撰写、显示、处理、通信</li></ul><h5 id="邮件服务器"><a class="markdownIt-Anchor" href="#邮件服务器"></a> 邮件服务器</h5><pre><code>使用CS模型、用来发送和接收邮件</code></pre><h5 id="邮件发送协议smtp和邮件读写协议pop3-imap"><a class="markdownIt-Anchor" href="#邮件发送协议smtp和邮件读写协议pop3-imap"></a> 邮件发送协议（SMTP）和邮件读写协议（POP3、IMAP）</h5><p><strong>①SMTP协议（简单邮件传输协议）</strong></p><ul><li>使用TCP进行email消息的可靠传输</li><li>端口号25</li><li>使用CS模型</li><li>SMTP通信的三个阶段：<br>i.建立连接<br>ii.邮件传送<br>iii.连接释放</li></ul><p><strong>②POP3协议</strong></p><ul><li>使用PULL的方式取出邮件，模型CS，使用TCP传输，端口110</li><li>客户要运行POP客户程序，服务端要运行POP服务程序</li><li>无状态</li><li>特点：只要用户从POP服务端读取了邮件，POP服务器就把该邮件删除</li><li>两种工作模式：下载并保留和下载并删除</li></ul><p><strong>③IMAP协议</strong>：所有消息统一保留在服务器</p><h4 id="电子邮件的信息格式"><a class="markdownIt-Anchor" href="#电子邮件的信息格式"></a> 电子邮件的信息格式</h4><p>首部+主体</p><ul><li>首部：发件人、收件人和标题</li><li>主体：消息本身（只能是ASCII字符）</li></ul><h4 id="mime通用互联网邮件扩充"><a class="markdownIt-Anchor" href="#mime通用互联网邮件扩充"></a> MIME（通用互联网邮件扩充）</h4><ul><li>通过在邮件头部增加额外的行以声明MIME的内容类型</li><li>出现原因：SMTP只能发送英文ASCII，不能发送汉字、图片</li></ul><h3 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h3><h4 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h4><ul><li>使用CS模型，运行在UDP上，端口号53</li><li>多层命名服务器构成的分布式数据库</li></ul><h4 id="域名结构"><a class="markdownIt-Anchor" href="#域名结构"></a> 域名结构：</h4><ul><li>….三级域名.二级域名.顶级域名<br>如：<a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a><br>顶级域名有cn，com，net，gov</li></ul><h4 id="域名服务器"><a class="markdownIt-Anchor" href="#域名服务器"></a> 域名服务器</h4><ul><li><p>分布式DNS系统，以层次方式组织，负责域名-&gt;IP解析</p></li><li><p>类型：（四种）<br>①根域名服务器</p><ul><li>本地域名解析服务器法解析域名时，访问根域名服务器</li><li>管理顶级域名，并不直接解析成IP，而是指向下一步查询哪个顶级域名服务器</li></ul><p>②顶级域名服务器（TLD）</p><ul><li>负责com，org，net，edu等顶级域名和国家顶级域名</li><li>管理所有注册的二级域名</li></ul><p>③权威域名服务器</p><ul><li>组织的域名解析服务器，提供组织内部服务器的解析服务</li></ul><p>④主机域名服务器</p><ul><li>主机发出DNS请求时，就发给本地域名服务器</li></ul></li></ul><h4 id="域名解析过程"><a class="markdownIt-Anchor" href="#域名解析过程"></a> 域名解析过程</h4><pre><code>- 域名到IP称为正向解析，IP到域名称为反向解析- 过程：主机向本地域名服务器的查询一般都是采用递归查询。如果查到，则直接返回IP。本地域名服务器无法解析，则本地域名服务器向根域名服务器的查询通常是采用迭代查询，根域名服务器返回顶级域名地址，然后本地服务器向顶级域名服务器查询。顶级服务器若不能解析，则给出权威域名服务器地址，本地域名服务器向权威域名服务器查询。若查到，则缓存后返回给主机；还查不到，则返回域名解析失败</code></pre><h3 id="ftp文件传输协议"><a class="markdownIt-Anchor" href="#ftp文件传输协议"></a> FTP（文件传输协议）</h3><pre><code>提供交互的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。</code></pre><h4 id="ftp的工作原理"><a class="markdownIt-Anchor" href="#ftp的工作原理"></a> FTP的工作原理</h4><ul><li>使用CS模型，使用TCP传输。FTP服务器有一个主进程负责新请求，若干从进程负责单个请求</li><li>服务器打开端口21，监听并等待客户连接</li><li>有连接请求后，启动从进程处理连接，然后主进程继续监听</li><li>主进程必须在会话期间保存用户状态，记录用户在远程目录上的当前位置</li></ul><h4 id="ftp的特点"><a class="markdownIt-Anchor" href="#ftp的特点"></a> FTP的特点</h4><ul><li>只提供文件传送的一些基本的服务，它使用 TCP 可靠的运输服务</li><li>减少或消除在不同操作系统下处理文件的不兼容性</li><li>使用客户服务器方式</li></ul><h4 id="ftp的两个连接tcp连接"><a class="markdownIt-Anchor" href="#ftp的两个连接tcp连接"></a> FTP的两个连接（TCP连接）</h4><p>①控制连接</p><ul><li>端口号21，用来传输连接请求等待控制信息，不能用来传输文件。在文件传输过程中一直处于打开状态，方便及时终止传输</li></ul><p>②数据连接</p><ul><li>端口号20，用来连接客户端和服务端的数据传输进程，传输完毕后该连接关闭</li><li>若要修改服务器上的文件，则先下载下来，修改，再上传上去；若要修改大文件需要全部复制下来</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记（一）之计算机网络体系结构</title>
    <link href="https://zshuhan.github.io/2020/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://zshuhan.github.io/2020/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2020-04-17T08:19:48.650Z</published>
    <updated>2020-05-18T04:14:05.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>正在学习计算机网络，为了方便日后回忆，在此记录自己的学习笔记。</p></blockquote><h1 id="一-计算机网络概述"><a class="markdownIt-Anchor" href="#一-计算机网络概述"></a> 一、计算机网络概述</h1><p>先放上思维导图！方便记忆<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200305113359935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="概述思维导图"></p><h2 id="1互联网"><a class="markdownIt-Anchor" href="#1互联网"></a> 1.互联网</h2><h3 id="11网络的网络"><a class="markdownIt-Anchor" href="#11网络的网络"></a> 1.1网络的网络</h3><ul><li>计算机网络：结点+链路</li><li>互连网：通过路由器把网络互连起来，构成计算机网络</li><li>互联网：特指Internet，是全球最大的、开放的、采用通用协议进行众多网络相连的特定计算机网络。特点：连通性和共享</li><li>主机：与网络相连的计算机</li></ul><h3 id="12互联网基础结构发展的三个阶段"><a class="markdownIt-Anchor" href="#12互联网基础结构发展的三个阶段"></a> 1.2互联网基础结构发展的三个阶段</h3><ul><li>第一阶段：从单个网络ARPANET向互联网发展得过程</li><li>第二阶段：建成三级结构的互联网</li><li>第三阶段：逐渐形成了多层次ISP结构的互联网<br><em>ISP</em>： 互联网服务提供商</li></ul><h3 id="13互联网的组成"><a class="markdownIt-Anchor" href="#13互联网的组成"></a> 1.3互联网的组成</h3><pre><code> 边缘部分+核心部分</code></pre><p>1.边缘部分</p><ul><li>由所有连接在互联网上的主机（端系统）组成<ul><li>端系统之间的通信：主机A的某个进程与主机B的另一个进程进行通信</li><li>两种通信方式：<br>（1）客户端/服务端方式（C/S方式）：进程之间的服务与被服务<br>（2）对等方式（P2P方式）：不区分服务与被服务关系</li></ul></li><li>用户直接使用来进行通信和资源共享</li></ul><p>2.核心部分</p><ul><li>重要工作者：路由器<ul><li>路由器：实现<strong>分组交换</strong>，<strong>转发</strong>收到的分组</li></ul></li></ul><blockquote><p>疑问：什么是分组交换？</p></blockquote><p>数据交换是实现数据通过网络核心从源主机到另一个主机!</p><p>1.为什么需要数据交换？</p><ul><li>1).链路问题  2).连通性 3).网络规模</li></ul><p>2.什么是交换？</p><ul><li>动态转接——把一条电话线转接到另一条电话线，使之连通</li><li>动态分配传输路线的资源</li></ul><p>3.数据交换的类型<br><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200305152249170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="数据交换类型"></p><p><mark>注：计算机交换方式绝大多数是分组交换，极少数是电路交换，绝不可能是报文交换</mark></p><h3 id="14计算机网络的类别"><a class="markdownIt-Anchor" href="#14计算机网络的类别"></a> 1.4计算机网络的类别</h3><ol><li>按网络作用范围：<br>广域网、 城域网、局域网、个人区域网</li><li>按网络的使用者：<br>公用网 、专用网</li><li>用来把用户接入互联网的网络</li></ol><h3 id="15计算机性能"><a class="markdownIt-Anchor" href="#15计算机性能"></a> 1.5计算机性能</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/20200305170531519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="计算机网络的性能"></p><ol><li>速率：数据的传送速度（单位：bit/s）</li><li>带宽：在单位时间内网络中的某信道所能通过的“<strong>最高数据率</strong>”</li><li>吞吐量：在单位时间内通过某个网络的数据量</li><li>时延：数据从网络的一端传送到另一端所需的时间<br>包括：<br>1） 发送时延<br>2）传播时延<br>3）处理时延<br>4）排队时延<br>总时延=发送时延+传播时延+处理时延+排队时延</li><li>时延带宽积：传播时延 x 带宽</li><li>往返时间RTT：从发送方到接收方总共经历的时间</li><li>利用率：分为信道利用率和网络利用率</li></ol><h3 id="16计算机网络的体系结构"><a class="markdownIt-Anchor" href="#16计算机网络的体系结构"></a> 1.6计算机网络的体系结构</h3><p><img src="/" class="lazyload" data-src="https://img-blog.csdnimg.cn/2020031719475649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc5NTExNQ==,size_16,color_FFFFFF,t_70"  alt="在这里插入图片描述"><br><mark><strong>体系结构=层+协议</strong></mark>（协议是水平的、服务是垂直的）<br>网络协议：为进行网络的数据交换而建立的规则（标准或约定）</p><ul><li>协议三要素：语法、语义、同步<br>（1）语法：数据与控制信息的结构或格式 。<br>（2）语义：需要发出何种控制信息，完成何种动作以及做出何种响应。<br>（3）同步：事件实现顺序的详细说明。</li></ul><p>1.OSI的体系结构：<br>（1). 应用层：实现用户的应用程序自之间的通信过程控制<br>（2). 表示层：对数据进行格式变换、加密解密和压缩恢复<br>（3). 会话层：建立、管理和终止会话，以及数据交换<br>（4). 运输层：提供可靠的端-端的数据传输服务<br>（5). 网络层：通过路由选择算法为分组通过通信子网选择适当的传输路径<br>（6). 数据链路层：在物理层提供比特流的基础上，采用差错控制与流量控制方法，使有差错的物理线路变成无差错的数据链路<br>（7). 物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输</p><p>#2.TCP/IP的四层协议：应用层、运输层、网际层IP、网络接口层</p><ol start="3"><li><mark>计算机网络</mark>综合OSI和TCP/IP的优点，采用<mark>五层协议的体系结构</mark><br>（1).应用层 ：该层是体系结构的最高层，直接为用户的应用进程提供服务<br>（2). 运输层：负责向两台主机中进程之间的通信提供通用的数据传输服务。主要使用的两种协议：<br>①传输控制协议（TCP）：提供面向连接的，可靠的数据传输服务（数据传输的单位是报文段）<br>②用户数据报协议（UDP）：提供无连接的，尽最大努力的数据传输服务（数据传输的单位是用户数据报)<br>（3). 网络层：负责为分组交换网上的不同主机提供通信服务。使用IP协议<br>（4). 数据链路层：在两个相邻结点之间传送数据时，数据链路层将网络层提供的IP数据组装成帧，在两个相邻结点间的链路上“透明”地传送帧中的数据<br>（5). 物理层：透明地传送比特流（数据单位是比特）</li></ol><p>4.实体、协议、服务和服务访问点<br>1.实体: 表示任何可发送或接收信息的硬件或软件进程。<br>2.协议: 控制两个对等实体进行通信的规则的集合<br>3.服务：在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下层所提供的服务<br>4.服务访问点：在同一系统中相邻两层的实体进行交互</p><h2 id="习题"><a class="markdownIt-Anchor" href="#习题"></a> 习题</h2><ol><li><p>以TCP/2P体系结构为例，简达发送端数据封装的过程。<br>答： ①在应用层，用户发出的数据称为报文，报文会被传递到传递到传输层<br>②传输层要构造段，同时把报文拆分，添加上自己的段头，然后传递到网络层<br>③网络层把数据段作为数据,并添上自己的头部，其结果称为数据报，并传递给网络接口层<br>④网络接口层把数据报作为数据，添上自己的头部，其结果称为帧，最后通过以太网传输</p></li><li><p>简述计算机网络采用民次结构模型的优点<br>答：①各层之间是独立的<br>②灵活性好<br>④结构上可分隔开，各层采用适合的技术实现<br>④易于实观和维护<br>⑤标准化工作</p></li><li><p>TCP/IP的核心思想是什么?<br>答：在传输层和网络层建立一个统一的虚拟逻辑网络，以屏蔽物理网络的硬件差别，从而实现普通的连通性。</p></li><li><p>协议与服务的区别与联系<br>答：<br>1）区别：<br>①协议的实现保证了能够向上一层提供服务。本层的服务用户只能看见服务而无法看见下面的协议。下面的协议对上面的服务用户是透明的。<br>②协议是“水平的”，即协议是控制两个对等实体进行通信的规则。但服务是“垂直的”，即服务是由下层通过层间接口向上层提供的。<br>2）联系：<br>①在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。 ②要实现本层协议，还需要使用下层所提供的服务</p></li><li><p>TCP/IP与OSI的系统结构进行比较，讨论其异同之处<br>答：1）OSI和TCP/IP的相同点是二者均采用层次结构，而且都是按功能分层。<br>2）OSI和TCP/IP的不同点：<br>①OSI分七层，自下而上分为物理层、数据链路层、网络层、运输层、会话层、表示层和应用层，而TCP/IP分四层：网络接口层、网间网层（IP）、传输层（TCP） 和应用层。<br>②OSI层次间存在严格的调用关系，两个（N）层实体的通信必须通过下一层（N-1）层实体，不能越级，而TCP/IP可以越过紧邻的下一层直接使用更低层次所提供的服务，因而减少了一些不必要的开销，提高了协议的效率<br>③OSI只考虑用一种标准的公用数据网，TCP/IP更侧重于异构网的互联问题</p></li><li><p>如何理解“透明”？<br>答：透明表示某个实际存在的事物看起来却好像不存在一样。比如你电脑上的应用程序，用户只需知道特定的按钮的功能，并不需要知道按钮的功能是怎么实现的</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://zshuhan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zshuhan.github.io/2020/04/17/hello-world/"/>
    <id>https://zshuhan.github.io/2020/04/17/hello-world/</id>
    <published>2020-04-17T05:02:25.987Z</published>
    <updated>2020-04-17T05:02:25.987Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
